library(readxl)
Base_salarios <- read_excel("C:/Users/Usuario/Downloads/Base salarios.xls")
View(Base_salarios)
library(readxl)
Tablas_dinï¿½_micas_Uso_de_base_de_datos_de_empleados <- read_excel("C:/Users/Usuario/Downloads/Tablas dinÃ¡micas - Uso de base de datos de empleados.xls")
View(Tablas_dinï¿½_micas_Uso_de_base_de_datos_de_empleados)
library(readxl)
Tabla_dinamica <- read_excel("C:/Users/Usuario/Downloads/Tablas dinÃ¡micas - Uso de base de datos de empleados.xls")
View(Tabla_dinamica)
sumary(Tabla_dinamica)
NOTA = c(3, 3.9, 3.5, 2.7, 3.1, 3, 2.6, 3.7, 3.1, 3.5,
3.9, 3.7, 3, 3.7, 3, 3, 2.7, 3.4, 2.6, 3.6,
4, 2.7, 3.5, 3, 3.6, 3.7, 3.1, 3, 4.3, 2.8)
mean(NOTA)
quantile(NOTA)
ppp = c(4, 9, 19, 7, 6, 5)
quantile(ppp)
ppp = c(1, 3, 2, 2, 3, 4, 2, 1, 3)
median(ppp)
quantile(ppp, prob=seq(0, 1, length = 101))
ppp = c(12, 15, 22, 28,31, 34, 35, 38)
quantile(ppp, prob=seq(0, 1, length = 101))
qf(0.02, 4, 12, lower.tail = F)
qf(0.05, 4, 12, lower.tail = F)
install.packages("leaps")
# Carga de funciones de usuario para RLM
source("Functions.R")
# Lectura de la base de datos asignada 'EquipoXX.txt' a traves del comando file.choose()
base <- read.table(file.choose(), header = T)
# Matriz de grÃƒÂ¡ficas de dispersiÃƒÂ³n con boxplots y correlaciones de las variables
pairs(base, lower.panel = myPanel.cor, upper.panel = panel.smooth, diag.panel = myPanel.box, labels = names(base))
# MÃƒ­nimos y MÃƒÂ¡ximos de cada variable
data.frame(apply(base, 2, range), row.names = c('min', 'max'))
# DefiniciÃƒÂ³n del modelo de RLM, Tabla ANOVA y Tabla de parÃƒÂ¡metros estimados
modelo <- lm(Y ~ ., base)
myAnova(modelo)
summary(modelo)$coefficients
# Tabla de todas las regresiones posibles
myAllRegTable(modelo)
# GrÃƒÂ¡fica y prueba de normalidad de Shapiro-Wilk
myQQnorm(modelo)
# CÃƒÂ¡lculo de residuales estudentizados y valores ajustados
res.stud <- round(rstandard(modelo), 4)
# InstalaciÃƒÂ³n y carga de paquetes necesarios (DEBE TENER CONEXIÃƒÂ“N A INTERNET)
if(!require(leaps)){install.packages("leaps"); library(leaps)}
# Carga de funciones de usuario para RLM
source("Functions.R")
if(!require(pacman)){install.packages("pacman"); library(pacman)}
pacman::p_load("tidyverse", "knitr", "leaps")
source("functions.R", local = knitr::knit_global())
knitr::opts_chunk$set(echo = TRUE, comment = NA, tidy.opts = list(width.cutoff = 60), tidy = T)
# InstalaciÃƒÂ³n y carga de paquetes necesarios (DEBE TENER CONEXIÃƒÂ“N A INTERNET)
if(!require(leaps)){install.packages("leaps"); library(leaps)}
# Carga de funciones de usuario para RLM
source("Functions.R")
# Lectura de la base de datos asignada 'EquipoXX.txt' a traves del comando file.choose()
base <- read.table(file.choose(), header = T)
# Matriz de grÃƒÂ¡ficas de dispersiÃƒÂ³n con boxplots y correlaciones de las variables
pairs(base, lower.panel = myPanel.cor, upper.panel = panel.smooth, diag.panel = myPanel.box, labels = names(base))
# MÃƒï¿½nimos y MÃƒÂ¡ximos de cada variable
data.frame(apply(base, 2, range), row.names = c('min', 'max'))
# DefiniciÃƒÂ³n del modelo de RLM, Tabla ANOVA y Tabla de parÃƒÂ¡metros estimados
modelo <- lm(Y ~ ., base)
myAnova(modelo)
summary(modelo)$coefficients
# Tabla de todas las regresiones posibles
myAllRegTable(modelo)
# GrÃƒÂ¡fica y prueba de normalidad de Shapiro-Wilk
myQQnorm(modelo)
# CÃƒÂ¡lculo de residuales estudentizados y valores ajustados
res.stud <- round(rstandard(modelo), 4)
yhat <- round(modelo$fitted.values, 4)
# GrÃƒÂ¡fica de Residuales estudentizados vs. Valores ajustados
plot(yhat, res.stud, xlab = "Valores Ajustados", ylab = "Residuales Estudentizados")
abline(h = 0, lty = 2, lwd = 2, col = 2)
## DiagnÃƒÂ³sticos para identificar valores extremos
# CÃƒÂ¡lculo de errores estÃƒÂ¡ndar de los valores ajustados
se.yhat <- round(predict(modelo, se.fit = T)$se.fit, 4)
# Residuales crudos del modelo
residuals <- round(modelo$residuals, 4)
# Distancias de Cook
Cooks.D <- round(cooks.distance(modelo), 4)
# Valores de la diagonal de la matriz H
hii.value <- round(hatvalues(modelo), 4)
# Dffits
Dffits <- round(dffits(modelo), 4)
# Tabla de diagnÃƒÂ³sticos
data.frame(base, yhat, se.yhat, residuals, res.stud, Cooks.D, hii.value, Dffits)
install.packages('knitr')
install.packages("knitr")
if(!require(pacman)){install.packages("pacman"); library(pacman)}
pacman::p_load("tidyverse", "knitr", "leaps")
source("functions.R", local = knitr::knit_global())
if(!require(pacman)){install.packages("pacman"); library(pacman)}
pacman::p_load("tidyverse", "knitr", "leaps")
source("functions.R", local = knitr::knit_global())
if(!require(pacman)){install.packages("pacman"); library(pacman)}
pacman::p_load("tidyverse", "knitr", "leaps")
source("functions.R", local = knitr::knit_global())
fisio <- read.table('fisio.txt', h = T)
pairs(fisio, lower.panel = myPanel.cor, upper.panel = panel.smooth, diag.panel = myPanel.box, labels = names(fisio))
qt(0.05/2, 13, lower.tail = TRUE)
qt(1 - 0.05/2, 13, lower.tail = TRUE)
qf(0.05, 6, 13 lower.tail = TRUE)
qf(0.05, 6, 13)
qf(0.05/2, 6, 13)
qf(0.05, 6, 13, lower.tail = TRUE)
qf(0.05, 6, 13, lower.tail = FALSE)
qf(0.02, 4, 37, lower.tail = FALSE)
qt(1 - 0.02/2, 37, lower.tail = TRUE)
qf(0.05, 3, 16, lower.tail = FALSE)
qt(1 - 0.02/2, 37, lower.tail = TRUE)
qf(0.1, 3, 16, lower.tail = FALSE)
qt(1 - 0.1/2, 16, lower.tail = TRUE)
qf(0.05, 2, 16, lower.tail = FALSE)
qf(0.02, 2, 16, lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F)
library(stringr)
library(roperators)
library(dplyr)
incidentes2014 <- read.csv('Incidentes_georreferenciados_2014.csv', sep = ',', header = T,
stringsAsFactors = T, encoding = "UTF-8",
na.strings=c(""," ","NA"))
incidentes2014 <- read.csv('Incidentes_georreferenciados_2014.csv', sep = ',', header = T,
stringsAsFactors = T, encoding = "UTF-8",
na.strings=c(""," ","NA"))
shiny::runApp('GitHub/Project_x/app')
runApp('GitHub/Project_x/app')
shiny::runApp('GitHub/Project_x/app')
