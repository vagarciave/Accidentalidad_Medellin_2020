xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 meses",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 meses",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 año",
step = "year",
stepmode = "backward"),
rangeslider = list(type = "date"))
)
fig
ds <- datos %>% mutate(Date = as.Date(FECHA)) %>%
group_by(FECHA) %>%
summarise(Total = n())
ds <- data.frame(Date = as.Date(ds$FECHA),Total = ds$Total)
fig <- plot_ly(ds, x = ~Date)
fig <- fig %>% add_lines(y = ~Total, name = "Total")
fig <- fig %>% layout(
title = "Total de accidentes",
xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 meses",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 meses",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 año",
step = "year",
stepmode = "backward"),
rangeslider = list(type = "date")))
)
fig
ds <- datos %>% mutate(Date = as.Date(FECHA)) %>%
group_by(FECHA) %>%
summarise(Total = n())
ds <- data.frame(Date = as.Date(ds$FECHA),Total = ds$Total)
fig <- plot_ly(ds, x = ~Date)
fig <- fig %>% add_lines(y = ~Total, name = "Total")
fig <- fig %>% layout(
title = "Total de accidentes",
xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 meses",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 meses",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 año",
step = "year",
stepmode = "backward"),
list(step = "all"))),
rangeslider = list(type = "date"))
)
fig
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
# Crear conteos por variable CLASE, agrupados por dia
datos_clase <- datos %>% group_by(FECHA,CLASE) %>% summarise(TOTAL = n()) %>% arrange(TOTAL)
fig_clase <- datos_clase %>% plot_ly(y = ~ TOTAL, color = ~CLASE, type = "box")   %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
#fig_clase <- fig_clase %>% layout(boxmode = "group")
fig_clase
# Crear conteos por variable CLASE, agrupados por dia
datos_clase <- datos %>% group_by(FECHA,CLASE) %>%
summarise(TOTAL = n()) %>%
arrange(desc(TOTAL))
fig_clase <- datos_clase %>% plot_ly(y = ~ TOTAL, color = ~CLASE, type = "box")   %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
#fig_clase <- fig_clase %>% layout(boxmode = "group")
fig_clase
library(plotly)
p <- iris %>%
plot_ly(
type = 'scatter',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
p <- iris %>%
type = 'scatter',
library(plotly)
p <- iris %>% plot_ly(
type = 'scatter',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
)
library(plotly)
p <- iris %>% plot_ly(
type = 'scatter',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
)
p
names(datos)
datos %>% mutate(YEAR = year(FECHA)) %>% group_by(CLASE,YEAR) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar',
transforms = list(
list(
type = 'filter',
target = ~TOTAL,
operation = '=',
value = unique(datos$YEAR)[1]
)
))   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
data
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="stack", stat="identity")
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="stack", stat="identity")
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="fill", stat="identity")
datos %>% mutate(YEAR = year(FECHA)) %>% group_by(CLASE,YEAR) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos %>% mutate(YEAR = year(FECHA)) %>% group_by(CLASE,YEAR) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
# Crear conteos por variable CLASE, agrupados por dia
datos_clase <- datos %>% group_by(FECHA,CLASE) %>%
summarise(TOTAL = n()) %>%
arrange(desc(TOTAL))
fig_clase <- datos_clase %>% plot_ly(y = ~ TOTAL, color = ~CLASE, type = "box")   %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
#fig_clase <- fig_clase %>% layout(boxmode = "group")
fig_clase
datos %>% group_by(GRAVEDAD) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ GRAVEDAD, y = ~ TOTAL,color = ~GRAVEDAD, type = 'bar')  %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~GRAVEDAD),
yaxis = list(title = "Total")
)
datos %>% group_by(COMUNA) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ COMUNA, y = ~ TOTAL,color = ~COMUNA, type = 'bar')  %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~COMUNA),
yaxis = list(title = "Total")
)
datos %>% group_by(COMUNA) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ COMUNA, y = ~ TOTAL,color = ~COMUNA, type = 'bar')  %>%
layout(
title = "Total de accidentes por Comuna",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~COMUNA),
yaxis = list(title = "Total")
)
datos$PERIODO
unique(datos$PERIODO)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F)
incidentes2014 <- read.csv('Incidentes_georreferenciados_2014.csv', sep = ',', header = T,
stringsAsFactors = T, encoding = "UTF-8",
na.strings=c(""," ","NA"))
incidentes2015 <- read.csv('Incidentes_georreferenciados_2015.csv', sep = ',', header = T,
stringsAsFactors = T, encoding = "UTF-8",
na.strings=c(""," ","NA"))
incidentes2016 <- read.csv('Incidentes_georreferenciados_2016.csv', sep = ',', header = T,
stringsAsFactors = T, encoding = "UTF-8",
na.strings=c(""," ","NA"))
incidentes2017 <- read.csv('Incidentes_georreferenciados_2017.csv', sep = ',', header = T,
stringsAsFactors = T, encoding = "UTF-8",
na.strings=c(""," ","NA"))
incidentes2018 <- read.csv('Incidentes_georreferenciados_2018.csv', sep = ',', header = T,
stringsAsFactors = T, encoding = "UTF-8",
na.strings=c(""," ","NA"))
base_completa <- incidentes2014 %>% union(incidentes2015) %>%
union(incidentes2016) %>% union(incidentes2017) %>%
union(incidentes2018)
library(stringr)
library(roperators)
library(dplyr)
library(caret)
library(class)
base_completa <- incidentes2014 %>% union(incidentes2015) %>%
union(incidentes2016) %>% union(incidentes2017) %>%
union(incidentes2018)
colnames(base_completa)[1] <- gsub('X.U.FEFF.','',colnames(base_completa)[1])
# Se remueven las bases innecesarias.
remove(incidentes2014, incidentes2015, incidentes2016, incidentes2017, incidentes2018)
base_completa$FECHA <- sapply(base_completa$FECHA, function(x) substr(x,1,10))
base_completa <- base_completa %>%
mutate(SEMANA_MES = isoweek(FECHA) - isoweek(ceiling_date(FECHA, "month") - months(1)) + 1,
DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
library(lubridate)
base_completa$FECHA <- sapply(base_completa$FECHA, function(x) substr(x,1,10))
base_completa <- base_completa %>%
mutate(SEMANA_MES = isoweek(FECHA) - isoweek(ceiling_date(FECHA, "month") - months(1)) + 1,
DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
isoweek(FECHA) - isoweek(ceiling_date(FECHA, "month") - months(1)) + 1
FECHA = base_completa$FECHA
base_completa$FECHA <- sapply(base_completa$FECHA, function(x) substr(x,1,10))
base_completa <- base_completa %>%
mutate(FECHA = ymd(FECHA)) %>%
mutate(SEMANA_MES = isoweek(FECHA) - isoweek(ceiling_date(FECHA, "month") - months(1)) + 1,
DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
#  Vector con fechas de dias festivos
# Definir dias festivos
festivos <- ymd(c(
#2014
'2014-01-01','2014-01-06','2014-03-24','2014-04-17','2014-04-18', '2014-05-01',
'2014-06-02','2014-06-23','2014-06-30','2014-07-20','2014-08-07', '2014-08-18',
'2014-10-13','2014-11-03','2014-11-17','2014-12-08','2014-12-25',
#2015
'2015-01-01','2015-01-12','2015-03-23','2015-03-29','2015-04-02','2015-04-03',
'2015-04-05','2015-05-01','2015-05-18','2015-06-08','2015-06-15','2015-06-29',
'2015-07-20','2015-08-07', '2015-08-17','2015-10-12','2015-11-02','2015-11-16',
'2015-12-08','2015-12-25',
#2016
'2016-01-01','2016-01-11','2016-03-20','2016-03-21','2016-03-24','2016-03-25',
'2016-03-27','2016-05-01','2016-05-09','2016-05-30','2016-06-06','2016-07-04',
'2016-07-20','2016-08-07', '2016-08-15','2016-10-17','2016-11-07','2016-11-14',
'2016-12-08','2016-12-25',
#2017
'2017-01-01','2017-01-09','2017-03-20','2017-04-09','2017-04-13','2017-04-14',
'2017-04-16','2017-05-01','2017-05-29','2017-06-19','2017-06-26','2017-07-03',
'2017-07-20','2017-08-07', '2017-08-21','2017-10-16','2017-11-06','2017-11-13',
'2017-12-08','2017-12-25',
#2018
'2018-01-01','2018-01-08','2018-03-19','2018-03-25','2018-03-29','2018-03-30',
'2018-04-01','2018-05-01','2018-05-14','2018-06-04','2018-06-11','2018-07-02',
'2018-07-20','2018-08-07', '2018-08-20','2018-10-15','2018-11-05','2018-11-11',
'2018-12-08','2018-12-25'
))
base_completa$FECHA <- sapply(base_completa$FECHA, function(x) substr(x,1,10))
base_completa <- base_completa %>%
mutate(FECHA = ymd(FECHA)) %>%
mutate(SEMANA_MES = isoweek(FECHA) - isoweek(ceiling_date(FECHA, "month") - months(1)) + 1,
DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
View(base_completa)
View(base_completa %>% group_by(FECHA,SEMANA_MES))
View(base_completa %>% group_by(FECHA,SEMANA_MES)) %>% summarise(n())
View(base_completa %>% group_by(FECHA,SEMANA_MES)) %>% summarise(n = n())
View(base_completa %>% groupby(FECHA,SEMANA_MES)) %>% summarise(n = n())
str(base_completa)
sum(isna(base_completa$FECHA))
sum(is.na(base_completa$FECHA))
sum(is.na(base_completa$SEMANA_MES))
View(base_completa %>% groupby(FECHA,SEMANA_MES) %>% summarise(n = n()))
View(base_completa %>% group_by(FECHA,SEMANA_MES) %>% summarise(n = n()))
View(base_completa %>% group_by(SEMANA_MES) %>% summarise(n = n()))
View(base_completa %>% group_by(FECHA,SEMANA_MES) %>% summarise(n = n()))
knitr::opts_chunk$set(echo = TRUE)
# Cargar datos
datos <- datos <- read.csv("https://raw.githubusercontent.com/vagarciave/Project_x/master/Reporte/Base_definitiva.csv", encoding = 'UTF-8', stringsAsFactors=FALSE)
str(datos)
is.na(datos)
sum(is.na(datos))
names(datos)
summary(datos$DIA)
datos
shiny::runApp('Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('Documents/GitHub/Accidentalidad_Medellin_2020/app')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/app")
runApp()
install.packages('RMySQL')
install.packages("RMySQL")
runApp()
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/app")
ls
dir()
runApp()
runApp()
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/app")
datos <- read.csv("Base_definiva.csv", encoding = 'UTF-8', stringsAsFactors=T)
runApp()
datos <- read.csv("Base_definiva.csv", encoding = 'UTF-8', stringsAsFactors=T)
runApp()
runApp()
runApp()
runApp()
datos <- read.csv("Base_Definiva.csv", encoding = 'UTF-8', stringsAsFactors=T)
datos$FECHA <- as.Date(datos$FECHA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/xd')
runApp('~/Desktop/xd')
runApp('~/Desktop/xd')
datos %>% group_by(CLASE) %>%
summarise(total = n()) %>%
ggplot(aes(x = CLASE, y = total)) +
geom_bar()
datos %>% group_by(CLASE) %>%
summarise(total = n()) %>%
ggplot(aes(x = CLASE)) +
geom_bar()
datos %>% group_by(CLASE) %>%
summarise(total = n())
runApp('~/Desktop/xd')
datos %>% ggplot(aes(CLASE)) +
geom_bar()
datos %>% ggplot(aes(CLASE, fill =CLASE)) +
geom_bar()
datos %>% ggplot(aes(CLASE, fill =CLASE)) +
geom_bar()
datos %>% ggplot(aes(CLASE, fill =CLASE)) +
geom_bar(position = "fill")
datos %>% ggplot(aes(PERIODO, fill =CLASE)) +
geom_bar(position = "fill")
datos %>% ggplot(aes(PERIODO, fill =CLASE)) +
geom_bar(position = "fill") +
geom_text(size = 3, position = position_stack(vjust = 0.5))
datos %>% ggplot(aes(PERIODO, fill =CLASE)) +
geom_bar(position = "fill")
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F, warning = F)
df <- read.csv(file = "Analisis1.csv", header = T, nrows = 50,
stringsAsFactors = T)
df$FECHA <- as.Date(df$FECHA)
df <- read.csv(file = "Analisis1.csv", header = T, nrows = 50,
stringsAsFactors = T)
df; remove(df)
df <- read.csv(file = "Analisis1.csv", header = T, nrows = 50,
stringsAsFactors = T)
df; remove(df)
df <- read.csv(file = "Analisis2.csv", header = T, nrows = 50,
stringsAsFactors = T)
df; remove(df)
df <- read.csv(file = "Analisis3.csv", header = T, nrows = 50,
stringsAsFactors = T)
df; remove(df)
shiny::runApp()
runApp('~/GitHub/Project_x/Shiny_dashboard')
install.packages(pkg, dependencies = TRUE)
shiny::runApp('~/GitHub/Project_x/Shiny_dashboard')
