library(plotly)
p <- iris %>%
plot_ly(
type = 'scatter',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
p <- iris %>%
type = 'scatter',
library(plotly)
p <- iris %>% plot_ly(
type = 'scatter',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
)
library(plotly)
p <- iris %>% plot_ly(
type = 'scatter',
x = ~Sepal.Length,
y = ~Petal.Length,
text = ~Species,
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'filter',
target = ~Species,
operation = '=',
value = unique(iris$Species)[1]
)
)) %>% layout(
updatemenus = list(
list(
type = 'dropdown',
active = 0,
buttons = list(
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[1]),
label = unique(iris$Species)[1]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[2]),
label = unique(iris$Species)[2]),
list(method = "restyle",
args = list("transforms[0].value", unique(iris$Species)[3]),
label = unique(iris$Species)[3])
)
)
)
)
p
names(datos)
datos %>% mutate(YEAR = year(FECHA)) %>% group_by(CLASE,YEAR) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar',
transforms = list(
list(
type = 'filter',
target = ~TOTAL,
operation = '=',
value = unique(datos$YEAR)[1]
)
))   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
specie <- c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
condition <- rep(c("normal" , "stress" , "Nitrogen") , 4)
value <- abs(rnorm(12 , 0 , 15))
data <- data.frame(specie,condition,value)
data
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="stack", stat="identity")
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="stack", stat="identity")
ggplot(data, aes(fill=condition, y=value, x=specie)) +
geom_bar(position="fill", stat="identity")
datos %>% mutate(YEAR = year(FECHA)) %>% group_by(CLASE,YEAR) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos %>% mutate(YEAR = year(FECHA)) %>% group_by(CLASE,YEAR) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
# Crear conteos por variable CLASE, agrupados por dia
datos_clase <- datos %>% group_by(FECHA,CLASE) %>%
summarise(TOTAL = n()) %>%
arrange(desc(TOTAL))
fig_clase <- datos_clase %>% plot_ly(y = ~ TOTAL, color = ~CLASE, type = "box")   %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
#fig_clase <- fig_clase %>% layout(boxmode = "group")
fig_clase
datos %>% group_by(GRAVEDAD) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ GRAVEDAD, y = ~ TOTAL,color = ~GRAVEDAD, type = 'bar')  %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~GRAVEDAD),
yaxis = list(title = "Total")
)
datos %>% group_by(COMUNA) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ COMUNA, y = ~ TOTAL,color = ~COMUNA, type = 'bar')  %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~COMUNA),
yaxis = list(title = "Total")
)
datos %>% group_by(COMUNA) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ COMUNA, y = ~ TOTAL,color = ~COMUNA, type = 'bar')  %>%
layout(
title = "Total de accidentes por Comuna",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~COMUNA),
yaxis = list(title = "Total")
)
datos$PERIODO
unique(datos$PERIODO)
knitr::opts_chunk$set(echo = TRUE)
set.seed(647475189)
sample(c('J','V','F'),5,T)
library(plyr)
library(ggplot2)
# Get the levels for type in the required order
df$type = factor(df$type, levels = c("inter",  "VIIT", "HIIT"))
df = arrange(df, year, desc(type))
# Calculate the percentages
df = ddply(df, .(year), transform, percent = amount/sum(amount) * 100)
# Format the labels and calculate their positions
df = ddply(df, .(year), transform, pos = (cumsum(amount) - 0.5 * amount))
df$label = paste0(sprintf("%.0f", df$percent), "%")
# Plot
ggplot(df, aes(x = factor(year), y = amount, fill = type)) +
geom_bar(stat = "identity", width = .7) +
geom_text(aes(y = pos, label = label), size = 2) +
coord_flip()
library(plyr)
library(ggplot2)
# Get the levels for type in the required order
df$type = factor(df$type, levels = c("inter",  "VIIT", "HIIT"))
df = arrange(df, year, desc(type))
# Calculate the percentages
df = ddply(df, .(year), transform, percent = amount/sum(amount) * 100)
# Format the labels and calculate their positions
df = ddply(df, .(year), transform, pos = (cumsum(amount) - 0.5 * amount))
df$label = paste0(sprintf("%.0f", df$percent), "%")
# Plot
ggplot(df, aes(x = factor(year), y = amount, fill = type)) +
geom_bar(stat = "identity", width = .7) +
geom_text(aes(y = pos, label = label), size = 2) +
coord_flip()
knitr::opts_chunk$set(echo = TRUE)
datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar(position = "fill")
# Cargar datos
datos <- datos <- read.csv("https://raw.githubusercontent.com/vagarciave/Project_x/master/Reporte/Base_definitiva.csv", encoding = 'UTF-8', stringsAsFactors=FALSE)
p1 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar(position = "fill")
library(stringr)
library(roperators)
library(dplyr)
library(caret)
library(class)
library(lubridate)
# Cargar datos
datos <- datos <- read.csv("https://raw.githubusercontent.com/vagarciave/Project_x/master/Reporte/Base_definitiva.csv", encoding = 'UTF-8', stringsAsFactors=FALSE)
p1 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar(position = "fill")
p2 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar()
p1 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar(position = "fill")
p2 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar()
p2
p1 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar(position = "fill")
p2 <- datos %>% ggplot(aes(GRAVEDAD)) +
geom_bar()
p2
p1 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar(position = "fill")
p2 <- datos %>% ggplot(aes(GRAVEDAD)) +
geom_bar()
p1
p1 <- datos %>% ggplot(aes(PERIODO, fill = GRAVEDAD)) +
geom_bar(position = "fill")
pnorm(11.8, mean = 11.82, sd = 0.22)
pnorm(11.8, mean = 11.82, sd = 0.22)+pnorm(12.28, mean = 11.82, sd = 0.22,lower.tail = F)
0.4820505*933
(5+3.5+5+3.3+3.3)/5
(5+4.5+5+3.3+3.3)/5
(5+4.5+5+3.3+4.2)/5
(5+5+5+3.3+3.3)/5
(5+5+5+3.3+4.2)/5
(5+5+5+4.2+4.2)/5
(5+5+5+4.2+3.3)/5
(5+4.5+5+4.2+3.3)/5
(5+4.5+5+4.2+3.3)/5
(5+4.2+5+4.2+3.3)/5
(5+3.3+5+4.2+3.3)/5
(5+5+5+4.2+3.3)/5
(5+5+5+3.3+3.3)/5
a <- (7/39)/(1.5/10)
a
pnorm(a)-pnorm(-a)
pnorm(a)-pnorm(-a)
a <- 1.67
pnorm(a)-pnorm(-a)
1.1966
pnorm(a)-pnorm(-a)
a <- (7/30)/(1.5/10)
pnorm(a)-pnorm(-a)
a
1-pnorm(1/4)
var_test(0.32^2,15,0.74^2,10, conf.level = 0.99, alternative = 'less')
library(stests)
var_test(0.32^2,15,0.74^2,10, conf.level = 0.99, alternative = 'less')
pnorm(1.0047)
pnorm(5, mean = 3.375, sd = sqrt(2.616))
pnorm(-2.6429)
1-pnorm(1.89285)
1-pnorm(1.89285) + pnorm(-2.6429)
1-pnorm(1.89285) + pnorm(-2.6429)
0.03329888*925
pnorm(1.2653)
n <- 1615
p <- 0.08
q <- 1-p
pnorm(143, mean = n*p, sd = sqrt(n*p*q))
n
n <- 1000
p = 0.21
q <- 1-p
qnorm(0.95,mean = n*p, sd = sqrt(n*p*q))
exp(6 + (25/2))
qnorm(0.07, lower.tail = F)
qnorm(0.05, lower.tail = T)
pnorm(5, mean = 3.375, sd = sqrt(2.616))
pnorm(5, mean = 3.375, sd = sqrt(2.616))
n <- 1615
p <- 0.08
q <- 1-p
pnorm(143, mean = n*p, sd = sqrt(n*p*q))
(5+5+5+3.3+3.3)/5
(5+4.5+5+3.3+3.3)/5
(5+5+5+3.3+4.2)/5
pbinom(8*0.87, size = 8, prob = 0.87, lower.tail = F)
p <- c(250,234,305,305,378,305,223,223,410,485)
n <- length(p)
sig <- sd(p)/sqrt(n)
sig
1-pnorm(388, mean = mu, sd = sig)
n <- length(p)
sig <- sd(p)/sqrt(n)
mu <- 325
1-pnorm(388, mean = mu, sd = sig)
40*12 + 9 -28*3 +4
ing <- 40*(12) + 3*3
cost <- 28*3 -4
ing-cost
x <- c(4,5,6,4.4,5,7)
mean(x)
x <- c(4,5,6,4.4,5,7,3)
mean(x)
x <- c(4,5,6,4.4,5,7,2.5)
men(x)
mean(x)
x <- c(4,5,6,4.4,5,7,2)
mean(x)
x <- c(4,5,6,4.4,5,7,1)
mean(x)
x <- c(4,5,6,4.4,5,6,1)
mean(x)
x2 <- c(x,39.99)
mean(x2)
median(x)
median(x2)
pnorm(507,mean = 500, sd = 5)-pnorm(490,mean = 500, sd = 5)
pexp(30,0.65)
pexp(30,rate = 0.65)
pexp(30,rate = 0.65/24)
pexp(30,rate = 0.04)
pexp(30,rate = 0.044)
1-pnorm(3.063)
qnorm(0.85)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
t.test(x, conf.level = 0.95)
qt(0.025,length(x)-1)
qt(0.025,length(x)-1,lower.tail = F)
#punto2
t.test(x, conf.level = 0.95,alternative = 'less')
#punto2
t.test(x, mu = 205,conf.level = 0.95,alternative = 'less')
tc <- sqrt(31)*(mean(x)/sd(x))
tc
tc <- sqrt(31)*(mean(x)-205/sd(x))
tc
tc <- sqrt(31)*((mean(x)-205)/sd(x))
tc
#Region de rechazo
c(-Inf,qt(0.05))
#Region de rechazo
c(-Inf,qt(0.05,30))
#valorp
pt(tc, df = 30)
x = (n-1)*(var(kilometros)/5^2)
x = (30-1)*(var(x)/5^2)
x
var(x)
var(x)
var(x)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
var(x)
x = (30-1)*(var(x)/5^2)
sd(x)
library(stests)
var.test(x)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
var.test(x)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
x = (30-1)*(var(x)/(5^2))
x
x = (31-1)*(var(x)/(5^2))
x
(30)*(var(x)/(25))
var.test(x, null.value = 5^2)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
var.test(x, null.value = 5^2)
n <- 31
2*min(pchisq(x),pchisq(x,df = n-1, lower.tail = F))
2*min(pchisq(x, df = n-1),pchisq(x,df = n-1, lower.tail = F))
x = (30)*(var(x)/(25))
2*min(pchisq(x, df = n-1),pchisq(x,df = n-1, lower.tail = F))
c(-Inf, qchisq(alpha/2, df = n-1,lower.tail = F))
c(qchisq(1-alpha/2, df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1,lower.tail = F))
c(qchisq(1-0.05/2, df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1,lower.tail = F))
c(qchisq(1-(0.05/2), df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1))
c(qchisq(1-(0.05/2), df = n-1),Inf)
x = (30)*(var(x)/(25))
x
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
x2 = (30)*(var(x)/(25))
x2
c(-Inf, qchisq(0.05/2, df = n-1)) UNIDO c(qchisq(1-(0.05/2), df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1))c(qchisq(1-(0.05/2), df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1))
c(-Inf, qchisq(0.05/2, df = n-1))
c(qchisq(1-(0.05/2), df = n-1),Inf)
2*min(pchisq(9.74, df = n-1),pchisq(9.74,df = n-1, lower.tail = F))
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
sd(x)
sd(x)^4
sd(x)^2
0.6875+0.16369+0.062958+0.030463+0.016924+0.01032+0.00673
1-0.978585
0.030463+0.016924+0.01032
.16369+0.062958+0.030463+0.016924
0.16369+0.062958+0.030463+0.016924
0.274035/0.16369
1.02188*0.0577
shiny::runApp('Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard')
runApp('Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
datos <- read.csv("Base_definitiva.csv", encoding = 'UTF-8', stringsAsFactors=T)
# datos <- datos[sample(1:dim(datos)[1],1000),]
list_barrios <- unique(datos$BARRIO)
View(list_barrios)
# datos <- datos[sample(1:dim(datos)[1],1000),]
list_barrios <- sort(unique(datos$BARRIO))
View(list_barrios)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/app')
