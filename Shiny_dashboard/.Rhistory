ggplot(aes(x=DIA_NOMBRE, y=total, fill=DIA_FESTIVO)) +
geom_boxplot()
datos %>% group_by(DIA_NOMBRE,DIA_FESTIVO) %>%
summarise(total = n()) %>%
ggplot(aes(x=DIA_NOMBRE, y=total, fill=factor(DIA_FESTIVO))) +
geom_boxplot()
datos %>% group_by(DIA_NOMBRE,DIA_FESTIVO) %>%
summarise(total = n()) %>%
ggplot(aes(x=DIA_NOMBRE, y=total, fill=factor(DIA_FESTIVO))) +
geom_boxplot() +
facet_wrap(~DIA_NOMBRE, scale="free")
datos %>% group_by(DIA_NOMBRE) %>%
summarise(total = n()) %>%
ggplot(aes(x=DIA_NOMBRE, y=total)) +
geom_boxplot()
datos %>% group_by(DIA_NOMBRE) %>%
summarise(total = n()) %>%
ggplot(aes(x=DIA_NOMBRE, y=total)) +
geom_bar(position="fill", stat="identity")
datos %>% group_by(DIA_NOMBRE, DIA_FESTIVO) %>%
summarise(total = n()) %>%
ggplot(aes(x=DIA_NOMBRE, y=total, fill = DIA_FESTIVO)) +
geom_bar(position="fill", stat="identity")
datos %>% group_by(DIA_NOMBRE, DIA_FESTIVO) %>%
summarise(total = n()) %>%
mutate(DIA_FESTIVO = as.factor(DIA_FESTIVO)) %>%
ggplot(aes(x=DIA_NOMBRE, y=total, fill = DIA_FESTIVO)) +
geom_bar(position="fill", stat="identity")
df %>% group_by(MES, DISENO, PERIODO) %>%
summarise(total = n()) %>%
ggplot(aes(x = MES, y = total , color = DISENO))) +
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F, warning = F)
bar_barrio <- plot_ly(x = general_g$BARRIO, y = general_g$CONTEO, type = 'bar',
name = general_g$GRAVEDAD ,color = general_g$GRAVEDAD) %>%
layout(title="Top 5",yaxis = list(title = 'Cantidad'),
xaxis=list(categoryorder='array',
categoryarray=general_g$TOTAL),
barmode = 'stack',
colorway = c('#4c3d66', '#7982ce', '#ff975b',
'#a262a9', '#6f4d96', '#3d3b72', '#182844'))
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
shiny::runApp()
# Cargar mapa
load('maps/medellin_map.RData',.GlobalEnv)
runApp()
runApp()
runApp()
runApp()
source('maps/source_map.R')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
runApp()
source('maps/source_map.R')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
source('source/source_models.R')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
source('source/source_models.R')
source('maps/source_map.R')
load('maps/medellin_map.RData')
runApp()
source('maps/medellin_map.RData')
# Leer datos
medellin_map_location <-"maps/Barrio_Vereda.shp"
# Datos con los clusters
df_coloring <- read.csv("maps/clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-c(1,2)]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)<- c("NOMBRE","HERIDOS","MUERTOS","SOLO_DANOS","NRO_CLUSTER","NOMBRE_CLUSTER")
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
create_map <- function(){
# Leer datos
medellin_map_location <-"maps/Barrio_Vereda.shp"
# Datos con los clusters
df_coloring <- read.csv("maps/clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-c(1,2)]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)<- c("NOMBRE","HERIDOS","MUERTOS","SOLO_DANOS","NRO_CLUSTER","NOMBRE_CLUSTER")
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
barrios_med@data$MUERTOS <- df_coloring$MUERTOS[id_x]
barrios_med@data$SOLO_DANOS <- df_coloring$SOLO_DANOS[id_x]
pal <- colorFactor(c("red","#F68838","yellow","green","#D0C7C7"),
levels = c("Accidentalidad Alta",
"Accidentalidad Media",
"Accidentalidad moderada",
"Accidentalidad Baja",
NA))
popup <- paste(barrios_med@data$NOMBRE,
barrios_med@data$NOMBRE_CLUSTER,
paste('Muertos: ',barrios_med@data$MUERTOS),
paste('Heridos: ',barrios_med@data$HERIDOS),
paste('Solo daños: ',barrios_med@data$SOLO_DANOS),
sep="<br/>")
# Crear mapa
accidentes_barrios <- leaflet(barrios_med)
accidentes_barrios <- addProviderTiles(accidentes_barrios,provider="OpenStreetMap.Mapnik")
accidentes_barrios <- addPolygons(accidentes_barrios,
popup=popup,
fillColor = ~pal(barrios_med@data$NOMBRE_CLUSTER),
color= 'black',
weight = 1.5, fillOpacity = 0.6)
accidentes_barrios
}
create_map()
runApp()
source('maps/source_map.R')
source('maps/source_map.R')
source("maps/source_map.R")
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
source('source/source_models.R')
source("maps/source_map.R")
source("source/source_map.R")
source("source_map.R")
source("source_map.R")
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
source("source_map.R")
source("source_map.R", eencoding = "UTF-8")
source("source_map.R", encoding = "UTF-8")
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F, warning = F)
per <- table(df$PERIODO)
# Cargar datos
df <- read.csv("Base_definitiva.csv", encoding = 'UTF-8', stringsAsFactors=FALSE,
header = T)
per <- table(df$PERIODO)
library(RColorBrewer)
barxperiodo <- barplot(per, ylim = c(0,50000), xlab = "Año",
ylab = "Cantidad de accidentes", main = "ACCIDENTES MEDELLIN (2014-2018)",
cex.axis = "0.8",cex.lab = "1.5",
col= brewer.pal(5, "Set3"), las = 1)
text(x=barxperiodo, y=per, pos=3, cex=1, col="black", labels = per)
per <- table(df$PERIODO)
library(RColorBrewer)
barxperiodo <- barplot(per, ylim = c(0,50000), xlab = "Año",
ylab = "Cantidad de accidentes", main = "ACCIDENTES MEDELLIN (2014-2018)",
cex.axis = "0.8",cex.lab = "1.5",
col= brewer.pal(5, "Set3"), las = 1)
text(x=barxperiodo, y=per, pos=3, cex=1, col="black", labels = per)
per
df_comuna <- table(df$COMUNA)
accidentesxcomuna <- barplot(df_comuna, ylim = c(0,47000), xlab = " ",
ylab = "Número de accidentes", main = "CANTIDAD DE ACCIDENTES EN COMUNAS DE  MEDELLIN
(2014-2018)", cex.axis = "0.8",cex.lab = "1.5",
col = brewer.pal(16, "Set3"), las=3, cex.names = 0.6)
text(x=accidentesxcomuna, y=df_comuna, pos=3, cex=0.7, col="black",label=df_comuna)
completa_gravedad <- df %>%
dplyr::select(PERIODO, MES,BARRIO,GRAVEDAD)%>%
group_by(PERIODO, MES,BARRIO,GRAVEDAD)%>%
summarise(CONTEO=length(PERIODO))
library(dplyr)
library(plotly)
library(ggplot2)
completa_gravedad <- df %>%
dplyr::select(PERIODO, MES,BARRIO,GRAVEDAD)%>%
group_by(PERIODO, MES,BARRIO,GRAVEDAD)%>%
summarise(CONTEO=length(PERIODO))
completa_barrio <- completa_gravedad %>%
dplyr::select(PERIODO, MES,BARRIO, CONTEO)%>%
group_by(PERIODO, MES,BARRIO)%>%
summarise(TOTAL=sum(CONTEO))
completa <- left_join(completa_gravedad,completa_barrio,
by = c("PERIODO", "BARRIO", "MES"))
general<- completa[, c("BARRIO", "CONTEO")] %>%
dplyr::select(BARRIO, CONTEO) %>%
group_by(BARRIO) %>%
summarise(TOTAL =sum(CONTEO))
general_gravedad<-df[,c("BARRIO", "GRAVEDAD")]%>%
dplyr::select(BARRIO,GRAVEDAD)%>%
group_by(BARRIO, GRAVEDAD)%>%
summarise(CONTEO=length(BARRIO))
ordenamiento<-general[order(-general$TOTAL),]
ordenamiento<-head(ordenamiento,5)
ordenamiento$BARRIO<-as.character(ordenamiento$BARRIO)
general_g<-inner_join(general_gravedad,ordenamiento,by="BARRIO")
general_g<-general_g[order(-general_g$TOTAL),]
bar_barrio <- plot_ly(x = general_g$BARRIO, y = general_g$CONTEO, type = 'bar',
name = general_g$GRAVEDAD ,color = general_g$GRAVEDAD) %>%
layout(title="Top 5",yaxis = list(title = 'Cantidad'),
xaxis=list(categoryorder='array',
categoryarray=general_g$TOTAL),
barmode = 'stack',
colorway = c('#4c3d66', '#7982ce', '#ff975b',
'#a262a9', '#6f4d96', '#3d3b72', '#182844'))
bar_barrio
xgravedad <- table(df$GRAVEDAD)
accidetexgravedad <- barplot(xgravedad, ylim = c(0,120000), xlab = "Gravedad",
ylab = "Número de accidentes", main = "ACCIDENTES MEDELLIN (2014-2018)",
cex.axis = "0.8",cex.lab = "1.5",
col = brewer.pal(3, "Set3"), las=1)
text(x=accidetexgravedad, y=xgravedad, pos=3, cex=0.8, col="black",labels = xgravedad)
bar_barrio <- plot_ly(x = general_g$BARRIO, y = general_g$CONTEO, type = 'bar',
name = general_g$GRAVEDAD ,color = general_g$GRAVEDAD) %>%
layout(title="Top 5",yaxis = list(title = 'Cantidad'),
xaxis=list(categoryorder='array',
categoryarray=general_g$TOTAL),
barmode = 'stack',
colorway = c('#4c3d66', '#7982ce', '#ff975b',
'#a262a9', '#6f4d96', '#3d3b72', '#182844'))
bar_barrio
xgravedad <- table(df$GRAVEDAD)
accidetexgravedad <- barplot(xgravedad, ylim = c(0,120000), xlab = "Gravedad",
ylab = "Número de accidentes", main = "ACCIDENTES MEDELLIN (2014-2018)",
cex.axis = "0.8",cex.lab = "1.5",
col = brewer.pal(3, "Set3"), las=1)
text(x=accidetexgravedad, y=xgravedad, pos=3, cex=0.8, col="black",labels = xgravedad)
xgravedad <- table(df$GRAVEDAD)
accidetexgravedad <- barplot(xgravedad, ylim = c(0,120000), xlab = "Gravedad",
ylab = "Número de accidentes", main = "ACCIDENTES MEDELLIN (2014-2018)",
cex.axis = "0.8",cex.lab = "1.5",
col = brewer.pal(3, "Set3"), las=1)
text(x=accidetexgravedad, y=xgravedad, pos=3, cex=0.8, col="black",labels = xgravedad)
df %>% group_by(DIA_NOMBRE, DIA_FESTIVO) %>%
summarise(total = n()) %>%
mutate(DIA_FESTIVO = as.factor(DIA_FESTIVO)) %>%
ggplot(aes(x=DIA_NOMBRE, y=total, fill = DIA_FESTIVO)) +
geom_bar(position="fill")
df %>% group_by(DIA_NOMBRE, DIA_FESTIVO) %>%
summarise(total = n()) %>%
mutate(DIA_FESTIVO = as.factor(DIA_FESTIVO)) %>%
ggplot(aes(x=DIA_NOMBRE, y=total, fill = DIA_FESTIVO)) +
geom_bar(stat="identity")
df %>% group_by(DIA_NOMBRE, DIA_FESTIVO) %>%
summarise(total = n()) %>%
mutate(DIA_FESTIVO = as.factor(DIA_FESTIVO),
DIA_NOMBRE = factor(DIA_NOMBRE, levels = c("LUNES","MARTES","MIERCOLES", "JUEVES","VIERNES","SABADO","DOMINGO"))) %>%
ggplot(aes(x=DIA_NOMBRE, y=total, fill = DIA_FESTIVO)) +
geom_bar(stat="identity")
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
shiny::runApp()
runApp()
runApp()
# Datos con los clusters
df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-c(1,2)]
# Leer datos
medellin_map_location <-"Barrio_Vereda.shp"
save(medellin_map_location, file = "medellin_map_location.RData")
save(df_coloring, file = "df_coloring.RData")
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
save(df_coloring, file = "df_coloring.RData")
save(medellin_map_location, file = "medellin_map_location.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
# Cargar datos
load(file = 'datos.RData', .GlobalEnv)
datos %>%
group_by(FECHA,CLASE,GRAVEDAD,COMUNA,BARRIO) %>%
summarise("TOTAL ACCIDENTES" = n())
warnings()
datos <- datos %>%
group_by(FECHA,CLASE,GRAVEDAD,COMUNA,BARRIO) %>%
summarise("TOTAL ACCIDENTES" = n())
save(datos, file = 'datos.RData')
# Cargar datos
load(file = 'datos.RData', .GlobalEnv)
View(datos)
# Cargar datos
load(file = 'datos.RData', .GlobalEnv)
View(datos)
View(datos)
datos <- read.csv("Base_definitiva.csv",encoding = "UTF-8")
View(datos)
datos_clase <- datos %>%
group_by(FECHA,CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
View(datos_clase)
save(datos_clase, file = "data/datos_clase.RData")
load(file = 'data/datos_clase.RData',.GlobalEnv)
View(datos_clase)
datos_gravedad <- datos  %>%
group_by(FECHA,GRAVEDAD) %>%
summarise(TOTAL = n())
save(datos_gravedad, file = "data/datos_gravedad.RData")
source('source/source_charts.R')
x <- expand_grid(list("C",'S'),list(1:6))
View(x)
x <- expand_grid(list("C",'S'),1:6)
x
x <- expand_grid(c("C",'S'),1:6)
x
View(x)
x <- expand_grid(1:6,c("C",'S'))
x <- expand_grid(1:6,c("C",'S'))
x <- expand_grid(1:6,c("C",'S'),c("C","S"))
x
x <- expand_grid(dado = 1:6,lanz1 = c("C",'S'),lanz2 = c("C","S"))
View(x)
x$lanz2 <- ifelse(x$dado %% 2 = 0,x$lanz2,NA)
x$lanz2 <- ifelse(x$dado %% 2 == 0,x$lanz2,NA)
View(x)
sum(x$lanz2 != NA)
sum(is.na(x$lanz2))
sum(x$lanz1 == "C" | x$lanz2 == "C")
15/24
15/24
x <- 15:21
px <- c(10,7,13,15,5,5,5)/60
sum(px)
sum(x*px)
sum(x^2*px)
sum(x^2*px)-17.55^2
sqrt(3.1475)
expand.grid(1:6,1:6)
y <- apply(d9, 1, max)
d9 <- expand.grid(1:6,1:6)
y <- apply(d9, 1, max)
Y
y
mean(y == 1)
sum(y == 1)
sum(y == 2)
sum(y == 3)
sum(y == 4)
sum(y == 5)
sum(y == 6)
x <- 1:6
px <- c(1,3,5,7,9,11)/36
sum(x*px)
sum((x^2)*px)-sum(x*px)^2
sqrt(1.971451)
mean(y)
var(y)
x <- 1:6
px <- c(1,3,5,7,9,11)/36
x^2
sum(x2*px)
x2 <- x^2
sum(x2*px)
sum(x2*px)-(mean(y))^2
mean(y)
sd(y)
sum(x2*px) - 4.472222^2
1.85e-3
View(datos)
datos_comuna <- datos  %>%
group_by(COMUNA) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
save(datos_comuna, file = 'data/datos_comuna.RData')
datos_barrio <- datos %>% filter(ymd(FECHA) >= input$daterange2[1],
ymd(FECHA) <= input$daterange2[2]) %>%
group_by(BARRIO) %>%
summarise(TOTAL = n())
datos_barrio <- datos %>%
group_by(BARRIO) %>%
summarise(TOTAL = n())
save(datos_barrio, file = 'data/datos_barrio.RData')
df_diseno <- datos %>%
group_by(DISENO) %>%
summarise(TOTAL = n())
save(df_diseno, file = 'data/df_diseno.RData')
# Cargar datos
print(Sys.time())
load(file = 'data/barrio_dia_2019pred.RData',.GlobalEnv)
load(file = 'data/barrio_semana_2019pred.RData',.GlobalEnv)
load(file = 'data/barrio_mes_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_dia_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_semana_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_mes_2019pred.RData',.GlobalEnv)
load(file = 'data/medellin_map_location.RData',.GlobalEnv)
load(file = 'data/df_coloring.RData',.GlobalEnv)
load(file = 'data/datos_clase.RData',.GlobalEnv)
load(file = 'data/datos_comuna.RData',.GlobalEnv)
load(file = 'data/datos_barrio.RData',.GlobalEnv)
load(file = 'data/datos_gravedad.RData',.GlobalEnv)
load(file = 'data/df_diseno.RData',.GlobalEnv)
print(Sys.time())
runApp()
datos <- datos %>%
group_by(FECHA,CLASE,GRAVEDAD,COMUNA,BARRIO) %>%
summarise("TOTAL ACCIDENTES" = n())
save(datos, file = 'data/datos.RData')
runApp()
runApp()
runApp()
View(df_diseno)
datos <- read.csv('Base_definitiva.csv')
datos_clase <- datos %>%
group_by(FECHA,CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
save(datos_clase, file = 'data/datos_clase.RData')
datos_gravedad <- datos %>%
group_by(FECHA,GRAVEDAD) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
save(datos_gravedad, file = 'data/datos_gravedad.RData')
datos_comuna<- datos %>%
group_by(FECHA,COMUNA) %>%
summarise(TOTAL = n())
save(datos_comuna, file = 'data/datos_comuna.RData')
datos_barrio<- datos %>%
group_by(FECHA,BARRIO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
save(datos_barrio, file = 'data/datos_barrio.RData')
df_diseno <- datos %>%
group_by(FECHA,DISENO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
save(df_diseno, file = 'data/df_diseno.RData')
runApp()
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
runApp()
runApp()
f_chart_barrio()
f_chart_barrio("2019-01-01","2019-05-20")
runApp()
runApp()
runApp()
source('maps_scripts.R')
create_map <- function(){
# Leer datos
#medellin_map_location <-"Barrio_Vereda.shp"
# Datos con los clusters
#df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-c(1,2)]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)<- c("NOMBRE","HERIDOS","MUERTOS","SOLO_DANOS","NRO_CLUSTER","NOMBRE_CLUSTER")
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
barrios_med@data$MUERTOS <- df_coloring$MUERTOS[id_x]
barrios_med@data$SOLO_DANOS <- df_coloring$SOLO_DANOS[id_x]
pal <- colorFactor(c("red","#F68838","yellow","green","#D0C7C7"),
levels = c("Accidentalidad Alta",
"Accidentalidad Media",
"Accidentalidad moderada",
"Accidentalidad Baja",
NA))
popup <- paste(barrios_med@data$NOMBRE,
barrios_med@data$NOMBRE_CLUSTER,
paste('Muertos: ',barrios_med@data$MUERTOS),
paste('Heridos: ',barrios_med@data$HERIDOS),
paste('Solo daños: ',barrios_med@data$SOLO_DANOS),
sep="<br/>")
# Crear mapa
accidentes_barrios <- leaflet(barrios_med)
accidentes_barrios <- addProviderTiles(accidentes_barrios,provider="OpenStreetMap.Mapnik")
accidentes_barrios <- addPolygons(accidentes_barrios,
popup=popup,
fillColor = ~pal(barrios_med@data$NOMBRE_CLUSTER),
color= 'black',
weight = 1.5, fillOpacity = 0.6)
accidentes_barrios
}
source('maps_scripts.R')
create_map <- function(){
# Leer datos
#medellin_map_location <-"Barrio_Vereda.shp"
# Datos con los clusters
#df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-c(1,2)]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)<- c("NOMBRE","HERIDOS","MUERTOS","SOLO_DANOS","NRO_CLUSTER","NOMBRE_CLUSTER")
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
barrios_med@data$MUERTOS <- df_coloring$MUERTOS[id_x]
barrios_med@data$SOLO_DANOS <- df_coloring$SOLO_DANOS[id_x]
pal <- colorFactor(c("red","#F68838","yellow","green","#D0C7C7"),
levels = c("Accidentalidad Alta",
"Accidentalidad Media",
"Accidentalidad moderada",
"Accidentalidad Baja",
NA))
popup <- paste(barrios_med@data$NOMBRE,
barrios_med@data$NOMBRE_CLUSTER,
paste('Muertos: ',barrios_med@data$MUERTOS),
paste('Heridos: ',barrios_med@data$HERIDOS),
paste('Solo daños: ',barrios_med@data$SOLO_DANOS),
sep="<br/>")
# Crear mapa
accidentes_barrios <- leaflet(barrios_med)
accidentes_barrios <- addProviderTiles(accidentes_barrios,provider="OpenStreetMap.Mapnik")
accidentes_barrios <- addPolygons(accidentes_barrios,
popup=popup,
fillColor = ~pal(barrios_med@data$NOMBRE_CLUSTER),
color= 'black',
weight = 1.5, fillOpacity = 0.6)
accidentes_barrios
}
create_map()
load(file = 'medellin_map_location.RData',.GlobalEnv)
load(file = 'df_coloring.RData',.GlobalEnv)
load(file = 'medellin_map_location.RData',.GlobalEnv)
load(file = 'df_coloring.RData',.GlobalEnv)
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
load(file = 'medellin_map_location.RData',.GlobalEnv)
load(file = 'df_coloring.RData',.GlobalEnv)
create_map()
create_map()
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_version2.0')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_version2.0')
runApp('~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_version2.0')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
runApp('~/Downloads/app-2.R')
runApp()
Q
Q
Q
Q
Q
Q
