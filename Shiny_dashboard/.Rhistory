x$statistic
x$estimate
pnorm(-1.054)
pnorm(-1.054093)
-0.1/sqrt((0.2*0.8)/10)
pnorm(-0.7905694)
qnorm(0.025,lower.tail = F)
(0.1-0.2)/(sqrt((0.2*0.8)/(10)))
qnorm(1-0.025)
n1 <- 31
xbar1 <- 52.8
s1 <- 7
n2 <- 11
xbar2 <- 50.1
s2<-19
alpha <- 1 -0.998
z<- qnorm(alpha/2, lower.tail = F)
ZC <- (xbar1-xbar2)/sqrt((s1/n1)+(s2/n2))
ZC
2*pnorm(ZC, lower.tail = F)
mod0 <- lm(y~x1+x2+x3+x6+x7+I(x1^2)+I(x3^2)+I(x6^2)+I(x7^2), data = table.b1)
# Parcial 1
library(MPV)
mod0 <- lm(y~x1+x2+x3+x6+x7+I(x1^2)+I(x3^2)+I(x6^2)+I(x7^2), data = table.b1)
mod1<-stepAIC(mod0, k=3)
library(MASS)
mod0 <- lm(y~x1+x2+x3+x6+x7+I(x1^2)+I(x3^2)+I(x6^2)+I(x7^2), data = table.b1)
mod1<-stepAIC(mod0, k=3)
rmse <- sqrt(mean((residuals(mod1)-fitted(mod1))^2))
rmse
mod0 <- gamlss(y~x1+x2+x3+x6+x7+I(x1^2)+I(x3^2)+I(x6^2)+I(x7^2), data = table.b1)
library(gamlss)
mod0 <- gamlss(y~x1+x2+x3+x6+x7+I(x1^2)+I(x3^2)+I(x6^2)+I(x7^2), data = table.b1)
mod1<-stepGAIC(mod0, k=3)
rmse <- sqrt(mean((residuals(mod1)-fitted(mod1))^2))
rmse
110/10
11*7
11*8
11*9
110/8
14*6
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
load('data/barrio_dia_2019_pred.RData')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
load('data/barrio_dia_2019pred.RData')
View(barrio_dia_2019pred)
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard/maps")
create_map <- function(){
# Leer datos
medellin_map_location <-"Barrio_Vereda.shp"
# Datos con los clusters
df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-c(1,2)]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)<- c("NOMBRE","HERIDOS","MUERTOS","SOLO_DANOS","NRO_CLUSTER","NOMBRE_CLUSTER")
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
barrios_med@data$MUERTOS <- df_coloring$MUERTOS[id_x]
barrios_med@data$SOLO_DANOS <- df_coloring$SOLO_DANOS[id_x]
pal <- colorFactor(c("red","#F68838","yellow","green","#D0C7C7"),
levels = c("Accidentalidad Alta",
"Accidentalidad Media",
"Accidentalidad moderada",
"Accidentalidad Baja",
NA))
popup <- paste(barrios_med@data$NOMBRE,
barrios_med@data$NOMBRE_CLUSTER,
paste('Muertos: ',barrios_med@data$MUERTOS),
paste('Heridos: ',barrios_med@data$HERIDOS),
paste('Solo daños: ',barrios_med@data$SOLO_DANOS),
sep="<br/>")
# Crear mapa
accidentes_barrios <- leaflet(barrios_med)
accidentes_barrios <- addProviderTiles(accidentes_barrios,provider="OpenStreetMap.Mapnik")
accidentes_barrios <- addPolygons(accidentes_barrios,
popup=popup,
fillColor = ~pal(barrios_med@data$NOMBRE_CLUSTER),
color= 'black',
weight = 1.5, fillOpacity = 0.6)
accidentes_barrios
}
create_map()
source('maps_scripts.R')
create_map <- function(){
# Leer datos
medellin_map_location <-"Barrio_Vereda.shp"
# Datos con los clusters
df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-c(1,2)]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)<- c("NOMBRE","HERIDOS","MUERTOS","SOLO_DANOS","NRO_CLUSTER","NOMBRE_CLUSTER")
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
barrios_med@data$MUERTOS <- df_coloring$MUERTOS[id_x]
barrios_med@data$SOLO_DANOS <- df_coloring$SOLO_DANOS[id_x]
pal <- colorFactor(c("red","#F68838","yellow","green","#D0C7C7"),
levels = c("Accidentalidad Alta",
"Accidentalidad Media",
"Accidentalidad moderada",
"Accidentalidad Baja",
NA))
popup <- paste(barrios_med@data$NOMBRE,
barrios_med@data$NOMBRE_CLUSTER,
paste('Muertos: ',barrios_med@data$MUERTOS),
paste('Heridos: ',barrios_med@data$HERIDOS),
paste('Solo daños: ',barrios_med@data$SOLO_DANOS),
sep="<br/>")
# Crear mapa
accidentes_barrios <- leaflet(barrios_med)
accidentes_barrios <- addProviderTiles(accidentes_barrios,provider="OpenStreetMap.Mapnik")
accidentes_barrios <- addPolygons(accidentes_barrios,
popup=popup,
fillColor = ~pal(barrios_med@data$NOMBRE_CLUSTER),
color= 'black',
weight = 1.5, fillOpacity = 0.6)
accidentes_barrios
}
create_map()
medellin_map <- create_map()
save('medellin_map.RData')
save(medellin_map,'medellin_map.RData')
save(medellin_map,file = 'medellin_map.RData')
load(medellin_map)
load('medellin_map.RData')
medellin_map
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
datos <- read.csv("Base_definitiva.csv", encoding = 'UTF-8', stringsAsFactors=T)
datos <- subset( datos, select = -c(DIA, MES, PERIODO, DIA_FESTIVO, SEMANA_MES ) )
save(datos, file = 'datos.RData')
# Cargar datos
load(file = 'datos.RData', .GlobalEnv)
# listas para nombre de barrios y comunas
list_barrios <- sort(unique(datos$BARRIO))
list_comunas <- sort(unique(datos$COMUNA))
list_barrios
# Cargar datos
load(file = 'data/barrio_dia_2019pred.RData',.GlobalEnv)
load(file = 'data/barrio_semana_2019pred.RData',.GlobalEnv)
load(file = 'data/barrio_mes_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_dia_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_semana_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_mes_2019pred.RData',.GlobalEnv)
View(barrio_dia_2019pred)
View(barrio_semana_2019pred)
View(barrio_mes_2019pred)
View(comuna_dia_2019pred)
View(comuna_dia_2019pred)
View(comuna_semana_2019pred)
View(comuna_semana_2019pred)
week('2020-11-18')
week('2020-12-31')
week('2020-12-30')
week('2020-12-29')
week('2020-12-28')
strftime('2020-12-28', format = "%Y-%V")
strftime('2020-12-28', format = "%Y-%V") < strftime('2019-30-21', format = "%Y-%V"),
strftime('2020-12-28', format = "%Y-%V") < strftime('2019-30-21', format = "%Y-%V")
as.Date("2020-53") > as.Date("2020-52")
as.Date("2020-53",format = "%Y-%V" ) > as.Date("2020-52",format = "%Y-%V")
as.Date("2020-53",format = "%Y-%V") > as.Date("2020-52",format = "%Y-%V")
as.Date("2020-53",format = "%Y-%V") > as.Date("2020-50",format = "%Y-%V")
as.Date("2020-53",format = "%Y-%V") > as.Date("2020-20",format = "%Y-%V")
as.Date("2020-53",format = "%Y-%V")
yearweek("2020-53")
barrio_semana_2019pred$NSEMANA <- substr(barrio_semana_2019pred$SEMANA,6,8)
View(barrio_semana_2019pred)
barrio_semana_2019pred$NSEMANA <- as.numeric(substr(barrio_semana_2019pred$SEMANA,6,8))
save(barrio_semana_2019pred, file = 'data/barrio_semana_2019pred.RData')
load(file = 'data/barrio_semana_2019pred.RData',.GlobalEnv)
View(barrio_semana_2019pred)
barrio_mes_2019pred$NMES <- as.numeric(substr(barrio_semana_2019pred$MES,6,8))
barrio_mes_2019pred$NMES <- as.numeric(substr(barrio_mes_2019pred$MES,6,8))
View(barrio_mes_2019pred)
save(barrio_mes_2019pred, file = 'data/barrio_mes_2019pred.RData')
comuna_mes_2019pred$NMES <- as.numeric(substr(comuna_mes_2019pred$MES,6,8))
save(comuna_mes_2019pred, file = 'data/comuna_mes_2019pred.RData')
comuna_semana_2019pred$NSEMANA <- as.numeric(substr(comuna_semana_2019pred$SEMANA,6,8))
save(comuna_semana_2019pred, file = 'data/comuna_semana_2019pred.RData')
# Cargar datos
load(file = 'data/barrio_dia_2019pred.RData',.GlobalEnv)
load(file = 'data/barrio_semana_2019pred.RData',.GlobalEnv)
load(file = 'data/barrio_mes_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_dia_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_semana_2019pred.RData',.GlobalEnv)
load(file = 'data/comuna_mes_2019pred.RData',.GlobalEnv)
(15+3.3+4.2)/5
(15+3.3+4)/5
comuna_semana_2019pred
View(comuna_semana_2019pred)
fecha_inicio <- '2014-01-01'
fecha_fin <- '2015-01-01'
nombre = 'Aranjuez'
inicio <- week(fecha_inicio)
fin <- week(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- comuna_semana_2019pred[,c('COMUNA','CLASE','SEMANA','ACCIDENTALIDAD')] %>%
filter(COMUNA == nombre,
NSEMANA >= inicio,
NSEMANA <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
names(comuna_semana_2019pred)
month(fecha_fin)
month(fecha_inicio)
fecha_inicio <- '2014-06-01'
month(fecha_inicio)
comuna_mes_2019pred
warnings()
# Source code for model prediction
# Comuna dia
pred_comuna_dia <- function(fecha_inicio, fecha_fin,nombre){
df <- comuna_dia_2019pred[,c('COMUNA','CLASE','FECHA','ACCIDENTALIDAD')] %>%
filter(COMUNA == nombre,ymd(FECHA) >= fecha_inicio,ymd(FECHA) <= fecha_fin)
fig <- df %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(list(df = df, fig = fig))
}
#Comuna semana
pred_comuna_semana <- function(fecha_inicio, fecha_fin,nombre){
inicio <- week(fecha_inicio)
fin <- week(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- comuna_semana_2019pred %>%
filter(COMUNA == nombre,
NSEMANA >= inicio,
NSEMANA <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
df <- df[,c('COMUNA','CLASE','SEMANA','ACCIDENTALIDAD')]
fig <- df %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(list(df = df, fig = fig))
}
# comuna mes
pred_comuna_mes <- function(fecha_inicio, fecha_fin){
inicio <- month(fecha_inicio)
fin <- month(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- comuna_mes_2019pred %>%
filter(COMUNA == nombre,
NSEMANA >= inicio,
NSEMANA <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
df <- df[,c('COMUNA','CLASE','MES','ACCIDENTALIDAD')]
fig <- df %>%
plot_ly(x = ~MES, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(list(df = df, fig = fig))
}
# barrio dia
pred_barrio_dia <- function(fecha_inicio, fecha_fin){
df <- barrio_dia_2019pred[,c('COMUNA','CLASE','SEMANA','ACCIDENTALIDAD')] %>%
filter(COMUNA == nombre,ymd(FECHA) >= fecha_inicio,ymd(FECHA) <= fecha_fin)
fig <- df %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(list(df = df, fig = fig))
}
# barrio semana
pred_barrio_semana <- function(fecha_inicio, fecha_fin){
inicio <- week(fecha_inicio)
fin <- week(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- barrio_semana_2019pred %>%
filter(COMUNA == nombre,
NSEMANA >= inicio,
NSEMANA <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
df <- df[,c('COMUNA','CLASE','SEMANA','ACCIDENTALIDAD')]
fig <- df %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(list(df = df, fig = fig))
}
# Barrio mes
pred_barrio_mes <- function(fecha_inicio, fecha_fin){
inicio <- month(fecha_inicio)
fin <- month(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- barrio_mes_2019pred %>%
filter(COMUNA == nombre,
NSEMANA >= inicio,
NSEMANA <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
df <- df[,c('COMUNA','CLASE','MES','ACCIDENTALIDAD')]
fig <- df %>%
plot_ly(x = ~MES, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(list(df = df, fig = fig))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
barrio_dia_2019pred
barrio_mes_2019pred
# Source code for model prediction
# Comuna dia
pred_comuna_dia <- function(fecha_inicio, fecha_fin,nombre){
df <- comuna_dia_2019pred[,c('COMUNA','CLASE','FECHA','ACCIDENTALIDAD')] %>%
filter(COMUNA == nombre,ymd(FECHA) >= fecha_inicio,ymd(FECHA) <= fecha_fin)
titulo <- paste('Accidentalidad en la comuna',nombre)
fig <- df %>% ungroup() %>%
plot_ly(x = ~FECHA, y = ~ ACCIDENTALIDAD,
color = ~CLASE,
type = 'scatter',
mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "ACCIDENTALIDAD")
)
return(list(df = df, fig = fig))
}
#Comuna semana
pred_comuna_semana <- function(fecha_inicio, fecha_fin,nombre){
inicio <- week(fecha_inicio)
fin <- week(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- comuna_semana_2019pred %>%
filter(COMUNA == nombre,
NSEMANA >= inicio,
NSEMANA <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
df <- df[,c('COMUNA','CLASE','SEMANA','ACCIDENTALIDAD')]
titulo <- paste('Accidentalidad en la comuna',nombre)
fig <- df %>% ungroup() %>%
plot_ly(x = ~SEMANA, y = ~ ACCIDENTALIDAD,
color = ~CLASE,
type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "ACCIDENTALIDAD")
)
return(list(df = df, fig = fig))
}
# comuna mes
pred_comuna_mes <- function(fecha_inicio, fecha_fin, nombre){
inicio <- month(fecha_inicio)
fin <- month(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- comuna_mes_2019pred %>%
filter(COMUNA == nombre,
NMES >= inicio,
NMES <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
df <- df[,c('COMUNA','CLASE','MES','ACCIDENTALIDAD')]
titulo <- paste('Accidentalidad en la comuna',nombre)
fig <- df %>% ungroup() %>%
plot_ly(x = ~MES, y = ~ ACCIDENTALIDAD,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "ACCIDENTALIDAD")
)
return(list(df = df, fig = fig))
}
# barrio dia
pred_barrio_dia <- function(fecha_inicio, fecha_fin, nombre){
df <- barrio_dia_2019pred[,c('BARRIO','CLASE','SEMANA','ACCIDENTALIDAD')] %>%
filter(BARRIO == nombre,ymd(FECHA) >= fecha_inicio,ymd(FECHA) <= fecha_fin)
titulo <- paste('Accidentalidad en el barrio',nombre)
fig <- df %>% ungroup() %>%
plot_ly(x = ~FECHA, y = ~ ACCIDENTALIDAD,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "ACCIDENTALIDAD")
)
return(list(df = df, fig = fig))
}
# barrio semana
pred_barrio_semana <- function(fecha_inicio, fecha_fin, nombre){
inicio <- week(fecha_inicio)
fin <- week(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- barrio_semana_2019pred %>%
filter(BARRIO == nombre,
NSEMANA >= inicio,
NSEMANA <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
df <- df[,c('BARRIO','CLASE','SEMANA','ACCIDENTALIDAD')]
titulo <- paste('Accidentalidad en el barrio',nombre)
fig <- df %>% ungroup() %>%
plot_ly(x = ~SEMANA, y = ~ ACCIDENTALIDAD,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "ACCIDENTALIDAD")
)
return(list(df = df, fig = fig))
}
# Barrio mes
pred_barrio_mes <- function(fecha_inicio, fecha_fin, nombre){
inicio <- month(fecha_inicio)
fin <- month(fecha_fin)
yinicio <- year(fecha_inicio)
yfin <- year(fecha_fin)
df <- barrio_mes_2019pred %>%
filter(BARRIO == nombre,
NMES >= inicio,
NMES <= fin,
PERIODO >= yinicio,
PERIODO <= yfin)
titulo <- paste('Accidentalidad en el barrio',nombre)
df <- df[,c('BARRIO','CLASE','MES','ACCIDENTALIDAD')]
fig <- df %>% ungroup() %>%
plot_ly(x = ~MES, y = ~ ACCIDENTALIDAD,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "ACCIDENTALIDAD")
)
return(list(df = df, fig = fig))
}
pred_barrio_dia(fecha_inicio, fecha_fin, nombre)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
