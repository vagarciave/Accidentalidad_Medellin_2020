ing <- 40*(12) + 3*3
cost <- 28*3 -4
ing-cost
x <- c(4,5,6,4.4,5,7)
mean(x)
x <- c(4,5,6,4.4,5,7,3)
mean(x)
x <- c(4,5,6,4.4,5,7,2.5)
men(x)
mean(x)
x <- c(4,5,6,4.4,5,7,2)
mean(x)
x <- c(4,5,6,4.4,5,7,1)
mean(x)
x <- c(4,5,6,4.4,5,6,1)
mean(x)
x2 <- c(x,39.99)
mean(x2)
median(x)
median(x2)
pnorm(507,mean = 500, sd = 5)-pnorm(490,mean = 500, sd = 5)
pexp(30,0.65)
pexp(30,rate = 0.65)
pexp(30,rate = 0.65/24)
pexp(30,rate = 0.04)
pexp(30,rate = 0.044)
1-pnorm(3.063)
qnorm(0.85)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
t.test(x, conf.level = 0.95)
qt(0.025,length(x)-1)
qt(0.025,length(x)-1,lower.tail = F)
#punto2
t.test(x, conf.level = 0.95,alternative = 'less')
#punto2
t.test(x, mu = 205,conf.level = 0.95,alternative = 'less')
tc <- sqrt(31)*(mean(x)/sd(x))
tc
tc <- sqrt(31)*(mean(x)-205/sd(x))
tc
tc <- sqrt(31)*((mean(x)-205)/sd(x))
tc
#Region de rechazo
c(-Inf,qt(0.05))
#Region de rechazo
c(-Inf,qt(0.05,30))
#valorp
pt(tc, df = 30)
x = (n-1)*(var(kilometros)/5^2)
x = (30-1)*(var(x)/5^2)
x
var(x)
var(x)
var(x)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
var(x)
x = (30-1)*(var(x)/5^2)
sd(x)
library(stests)
var.test(x)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
var.test(x)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
x = (30-1)*(var(x)/(5^2))
x
x = (31-1)*(var(x)/(5^2))
x
(30)*(var(x)/(25))
var.test(x, null.value = 5^2)
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
var.test(x, null.value = 5^2)
n <- 31
2*min(pchisq(x),pchisq(x,df = n-1, lower.tail = F))
2*min(pchisq(x, df = n-1),pchisq(x,df = n-1, lower.tail = F))
x = (30)*(var(x)/(25))
2*min(pchisq(x, df = n-1),pchisq(x,df = n-1, lower.tail = F))
c(-Inf, qchisq(alpha/2, df = n-1,lower.tail = F))
c(qchisq(1-alpha/2, df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1,lower.tail = F))
c(qchisq(1-0.05/2, df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1,lower.tail = F))
c(qchisq(1-(0.05/2), df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1))
c(qchisq(1-(0.05/2), df = n-1),Inf)
x = (30)*(var(x)/(25))
x
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
x2 = (30)*(var(x)/(25))
x2
c(-Inf, qchisq(0.05/2, df = n-1)) UNIDO c(qchisq(1-(0.05/2), df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1))c(qchisq(1-(0.05/2), df = n-1),Inf)
c(-Inf, qchisq(0.05/2, df = n-1))
c(-Inf, qchisq(0.05/2, df = n-1))
c(qchisq(1-(0.05/2), df = n-1),Inf)
2*min(pchisq(9.74, df = n-1),pchisq(9.74,df = n-1, lower.tail = F))
x <- c(205.7,207.6,205.8,206.2,203.1,214.1,204.6,209.8,208.4,212.3,206.1,204.1,205.5,203.0,208.7,208.9,204.2,205.5,205.7,207.8,204.2,211.9,206.1,203.8,205.2,207.7,205.8,208.4,205.3,201.0,205.5)
sd(x)
sd(x)^4
sd(x)^2
0.6875+0.16369+0.062958+0.030463+0.016924+0.01032+0.00673
1-0.978585
0.030463+0.016924+0.01032
.16369+0.062958+0.030463+0.016924
0.16369+0.062958+0.030463+0.016924
0.274035/0.16369
1.02188*0.0577
shiny::runApp('Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard')
runApp('Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard')
runApp('Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard')
runApp('Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard')
runApp('Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard')
setwd("~/Documents/GitHub/Accidentalidad_Medellin_2020/Shiny_dashboard")
create_map <- function(){
# Leer datos
medellin_map_location <-"Barrio_Vereda.shp"
# Datos con los clusters
df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-1]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)[1] <- "NOMBRE"
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
barrios_med@data$MUERTOS <- df_coloring$MUERTOS[id_x]
barrios_med@data$SOLO_DAÑOS <- df_coloring$SOLO_DAÑOS[id_x]
pal <- colorFactor(c("red","#FF7300",383,"green"),
levels = c("Accidentalidad Alta",
"Accidentalidad Media",
"Accidentalidad moderada",
"Accidentalidad Baja"))
popup <- paste(barrios_med@data$NOMBRE,
barrios_med@data$NOMBRE_CLUSTER,
paste('Muertos ',barrios_med@data$MUERTOS),
paste('Heridos ',barrios_med@data$HERIDOS),
paste('Solo daños ',barrios_med@data$SOLO_DAÑOS),
sep="<br/>")
# Crear mapa
accidentes_barrios <- leaflet(barrios_med)
accidentes_barrios <- addProviderTiles(accidentes_barrios,provider="OpenStreetMap.Mapnik")
accidentes_barrios <- addPolygons(accidentes_barrios,
popup=popup,
fillColor = ~pal(barrios_med@data$NOMBRE_CLUSTER),
color= 'black',
weight = 1.5, fillOpacity = 0.4)
accidentes_barrios
}
create_map()
# Datos con los clusters
df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-1]
create_map <- function(){
# Leer datos
medellin_map_location <-"Barrio_Vereda.shp"
# Datos con los clusters
df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-1]
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
colnames(df_coloring)[1] <- "NOMBRE"
id_x <- match(barrios_med@data$NOMBRE,df_coloring$NOMBRE)
# Agregar seguridad
barrios_med@data$NOMBRE_CLUSTER <- df_coloring$NOMBRE_CLUSTER[id_x]
barrios_med@data$HERIDOS <- df_coloring$HERIDOS[id_x]
barrios_med@data$MUERTOS <- df_coloring$MUERTOS[id_x]
barrios_med@data$SOLO_DAÑOS <- df_coloring$SOLO_DAÑOS[id_x]
pal <- colorFactor(c("red","#FF7300",383,"green"),
levels = c("Accidentalidad Alta",
"Accidentalidad Media",
"Accidentalidad moderada",
"Accidentalidad Baja"))
popup <- paste(barrios_med@data$NOMBRE,
barrios_med@data$NOMBRE_CLUSTER,
paste('Muertos ',barrios_med@data$MUERTOS),
paste('Heridos ',barrios_med@data$HERIDOS),
paste('Solo daños ',barrios_med@data$SOLO_DAÑOS),
sep="<br/>")
# Crear mapa
accidentes_barrios <- leaflet(barrios_med)
accidentes_barrios <- addProviderTiles(accidentes_barrios,provider="OpenStreetMap.Mapnik")
accidentes_barrios <- addPolygons(accidentes_barrios,
popup=popup,
fillColor = ~pal(barrios_med@data$NOMBRE_CLUSTER),
color= 'black',
weight = 1.5, fillOpacity = 0.4)
accidentes_barrios
}
create_map()
shiny::runApp()
# Leer datos
medellin_map_location <-"Barrio_Vereda.shp"
# Datos con los clusters
df_coloring <- read.csv("clusters_final-2.csv", header = TRUE, fileEncoding = "UTF-8")[,-1]
df_coloring
barrios_med <- shapefile(medellin_map_location,
encoding="UTF-8",
use_iconv=TRUE)
runApp()
library(raster)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(stets)
library(stests)
z_test(420.2,50,5.7^2,conf.level = 0.97)
z_test(420.2,50,55.7^2,conf.level = 0.97)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("dashboardthemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datos <- read.csv("Base_definitiva.csv", encoding = 'UTF-8', stringsAsFactors=T)
ds <- datos %>% mutate(Date = as.Date(FECHA)) %>%
group_by(FECHA) %>%
summarise(Total = n())
ds <- data.frame(Date = as.Date(ds$FECHA),Total = ds$Total)
fig <- plot_ly(ds, x = ~Date)
fig <- fig %>% add_lines(y = ~Total, name = "Total")
fig <- fig %>% layout(
title = "Total de accidentes",
xaxis = list(
rangeselector = list(
buttons = list(
list(
count = 3,
label = "3 meses",
step = "month",
stepmode = "backward"),
list(
count = 6,
label = "6 meses",
step = "month",
stepmode = "backward"),
list(
count = 1,
label = "1 año",
step = "year",
stepmode = "backward"),
list(step = "all"))),
rangeslider = list(type = "date"))
)
fig
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'bar')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
runApp()
runApp()
runApp()
datos %>% group_by(GRAVEDAD) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ GRAVEDAD, y = ~ TOTAL,color = ~GRAVEDAD, type = 'bar')  %>%
layout(
title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~GRAVEDAD),
yaxis = list(title = "Total")
)
runApp()
runApp()
runApp()
runApp()
runApp()
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'pie')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'pie')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos_clase
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>%
mutate(TOTAL = TOTAL / sum(TOTAL))
arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'pie')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>%
mutate(TOTAL = TOTAL / sum(TOTAL))%>%
arrange(desc(TOTAL)) %>%
plot_ly(x = ~ CLASE, y = ~ TOTAL,color = ~CLASE, type = 'pie')   %>%
layout(
title = "Total de accidentes por Clase",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n())  %>%
mutate(TOTAL = TOTAL / sum(TOTAL))%>%
arrange(desc(TOTAL)) %>%
plot_ly(labels = ~CLASE, values = ~TOTAL, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n()) %>%
arrange(desc(TOTAL)) %>%
plot_ly(labels = ~CLASE, values = ~TOTAL, type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n()) %>%
arrange(desc(TOTAL)) %>%
plot_ly(labels = ~CLASE, values = ~TOTAL, COLOR  = ~CLASE,type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n()) %>%
arrange(desc(TOTAL)) %>%
plot_ly(labels = ~CLASE, values = ~TOTAL, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste('Total accidentes', TOTAL),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
datos %>% group_by(CLASE) %>%
summarise(TOTAL = n()) %>%
arrange(desc(TOTAL)) %>%
plot_ly(labels = ~CLASE, values = ~TOTAL, COLOR  = ~CLASE,type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
datos %>% group_by(DISENO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ DISENO, y = ~ TOTAL,color = ~DISENO, type = 'bar')  %>%
layout(
title = "Total de accidentes por Comuna",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~COMUNA),
yaxis = list(title = "Total")
)
datos %>% group_by(DISENO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ DISENO, y = ~ TOTAL,color = ~DISENO, type = 'bar')  %>%
layout(
title = "Total de accidentes por Comuna",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~DISENO),
yaxis = list(title = "Total")
)
datos %>% group_by(DISENO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ DISENO, y = ~ TOTAL/sum(TOTAL),color = ~DISENO, type = 'bar')  %>%
layout(
title = "Total de accidentes por Comuna",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~DISENO),
yaxis = list(title = "Total")
)
datos %>% group_by(DISENO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL)) %>%
plot_ly(x = ~ DISENO, y = ~ TOTAL,color = ~DISENO, type = 'bar')  %>%
layout(
title = "Total de accidentes por Comuna",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~DISENO),
yaxis = list(title = "Total")
)
runApp()
df_diseno <- datos %>% group_by(DISENO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
df_diseno <- datos %>% group_by(DISENO) %>%
summarise(TOTAL = n())  %>% arrange(desc(TOTAL))
fig <- plot_ly(
type = 'table',
header = list(
values = c('<b>DISEÑO</b>', '<b>Total</b>'),
line = list(color = '#506784'),
fill = list(color = '#119DFF'),
align = c('left','center'),
font = list(color = 'white', size = 12)
),
cells = list(
values = rbind(df_diseno),
line = list(color = '#506784'),
fill = list(color = c('#25FEFD', 'white')),
align = c('left', 'center'),
font = list(color = c('#506784'), size = 12)
))
fig
rbind(df_diseno)
t(df_diseno)
fig <- plot_ly(
type = 'table',
header = list(
values = c('<b>DISEÑO</b>', '<b>Total</b>'),
line = list(color = '#506784'),
fill = list(color = '#119DFF'),
align = c('left','center'),
font = list(color = 'white', size = 12)
),
cells = list(
values = t(df_diseno),
line = list(color = '#506784'),
fill = list(color = c('#25FEFD', 'white')),
align = c('left', 'center'),
font = list(color = c('#506784'), size = 12)
))
fig
fig <- plot_ly(
type = 'table',
header = list(
values = c('<b>DISEÑO</b>', '<b>Total</b>'),
line = list(color = '#506784'),
fill = list(color = '#119DFF'),
align = c('left','center'),
font = list(color = 'white', size = 12)
),
cells = list(
values = t(df_diseno),
line = list(color = '#506784'),
fill = list(color = c('#25FEFD', 'white')),
align = c('left', 'center'),
font = list(color = c('black'), size = 12)
))
fig
fig <- plot_ly(
type = 'table',
header = list(
values = c('<b>DISEÑO</b>', '<b>Total</b>'),
line = list(color = '#506784'),
fill = list(color = '#119DFF'),
align = c('left','center'),
font = list(color = 'white', size = 12)
),
cells = list(
values = t(df_diseno),
line = list(color = '#506784'),
fill = list(color = c('#d0eeec', 'white')),
align = c('left', 'center'),
font = list(color = c('black'), size = 12)
))
fig
runApp()
runApp()
runApp()
runApp()
runApp()
