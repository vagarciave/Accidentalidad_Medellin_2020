# Esta funcion retorna los accidentes observados y/o predichos
control_prediction <- function(fecha_inicio, fecha_fin, tipo_modelo, nombre){
if(tipo_modelo == 'comuna'){
filter_data <- accidentes_dia_comuna %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin) %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
}else if(tipo_modelo == 'barrio'){
filter_data <- accidentes_dia_barrio %>% filter(BARRIO == nombre_barrio,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin) %>%
group_by(BARRIO,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
}
pron <- ifelse(tipo_modelo == 'comuna','la','el')
titulo <- paste('Total de accidentes para', pron, tipo_modelo, nombre)
fig_clase <- filter_data %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase
}
runApp()
runApp()
runApp()
runApp()
# Cargar valores ajustados
load('accidentes_dia_barrio.RData')
load('accidentes_dia_comuna.RData')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(accidentes_dia_barrio)
runApp()
# Esta funcion retorna los accidentes observados y/o predichos
control_prediction <- function(fecha_inicio, fecha_fin, tipo_modelo, nombre, datos){
if(tipo_modelo == 'comuna'){
filter_data <- datos %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}else if(tipo_modelo == 'barrio'){
filter_data <- datos %>% filter(BARRIO == nombre_barrio,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin) %>%
group_by(BARRIO,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}
pron <- ifelse(tipo_modelo == 'comuna','la','el')
titulo <- paste('\n','Total de accidentes para', pron, tipo_modelo, nombre)
fig_clase_dia <- filter_data_dia %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_semana <- filter_data_semana %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_mes <- filter_data_mes %>%
plot_ly(x = ~MES, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(list(figdia = fig_clase_dia, figsemana = fig_clase_semana, figmes = fig_clase_mes,
tabdia = filter_data_dia,tabsemana = filter_data_semana,tabmes= filter_data_mes))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datos
nombre
fecha_fin
runApp()
runApp('~/Downloads/app')
runApp()
tipo_modelo = 'comuna'
nombre <- ifelse(tipo_modelo == 'comuna', input$nombre_comuna, input$nombre_barrio)
datos <- ifelse(tipo_modelo == 'comuna', accidentes_dia_comuna, accidentes_dia_barrio)
control_prediction(fecha_inicio,
fecha_fin,
tipo_modelo,
nombre,
datos)
if(tipo_modelo == 'comuna'){
filter_data <- datos %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}else if(tipo_modelo == 'barrio'){
filter_data <- datos %>% filter(BARRIO == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}
filter_data <- datos %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
datos
names(datos)
# Cargar valores ajustados
load('accidentes_dia_barrio.RData')
load('accidentes_dia_comuna.RData')
datos <- ifelse(tipo_modelo == 'comuna', accidentes_dia_comuna, accidentes_dia_barrio)
names(datos)
names(accidentes_dia_comuna)
runApp()
if(tipo_modelo == 'comuna'){
filter_data <- datos %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}else if(tipo_modelo == 'barrio'){
filter_data <- datos %>% filter(BARRIO == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}
datos = accidentes_dia_barrio
names(datos)
runApp()
datos = accidentes_dia_barrio
filter_data <- datos[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
runApp()
runApp()
if(tipo_modelo == 'comuna'){
filter_data <- datos[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}else if(tipo_modelo == 'barrio'){
filter_data <- datos[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
}
filter_data <- datos[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
datos
names(datos)
filter_data <- datos[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
names(filter_data)
names(datos)
datos = accidentes_dia_comuna
filter_data <- datos[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
runApp()
runApp()
pron <- ifelse(tipo_modelo == 'comuna','la','el')
filter_data <- accidentes_dia_comuna[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
filter_data <- accidentes_dia_comuna[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
pron <- ifelse(tipo_modelo == 'comuna','la','el')
titulo <- paste('\n','Total de accidentes para', pron, tipo_modelo, nombre)
fig_clase_dia <- filter_data_dia %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_semana <- filter_data_semana %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_mes <- filter_data_mes %>%
plot_ly(x = ~MES, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_dia
filter_data
comuna  = 'Aranjuez'
filter_data <- accidentes_dia_comuna[datos$COMUNA == nombre &
ymd(datos$FECHA) >= fecha_inicio &
ymd(datos$FECHA) <= fecha_fin,]
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>% summarise(Total = sum(ACCIDENTALIDAD))
filter_data_mes<- filter_data %>%
group_by(COMUNA,CLASE,MES) %>% summarise(Total = sum(ACCIDENTALIDAD))
pron <- ifelse(tipo_modelo == 'comuna','la','el')
titulo <- paste('\n','Total de accidentes para', pron, tipo_modelo, nombre)
fig_clase_dia <- filter_data_dia %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_semana <- filter_data_semana %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_mes <- filter_data_mes %>%
plot_ly(x = ~MES, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_dia
fecha_fin
fecha_inicio
filter_data
comuna
runApp()
fecha_inicio = '2014-01-01'
fecha_fin ='2018-12-31'
filter_data <- accidentes_dia_comuna[datos$COMUNA == nombre &
ymd(accidentes_dia_comuna$FECHA) >= fecha_inicio &
ymd(accidentes_dia_comuna$FECHA) <= fecha_fin,]
View(accidentes_dia_comuna)
filter_data <- accidentes_dia_comuna[datos$COMUNA == nombre &
ymd(accidentes_dia_comuna$FECHA) >= ymd(fecha_inicio) &
ymd(accidentes_dia_comuna$FECHA) <= ymd(fecha_fin),]
runApp()
runApp()
# Esta funcion retorna los accidentes observados y/o predichos
control_prediction <- function(fecha_inicio, fecha_fin, tipo_modelo){
if(tipo_modelo == 'comuna'){
filter_data <- accidentes_dia_comuna %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin) %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
}else if(tipo_modelo == 'barrio'){
filter_data <- accidentes_dia_barrio %>% filter(BARRIO == nombre_barrio,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin) %>%
group_by(BARRIO,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
}
titulo <- paste('Total de accidentes para', tipo_modelo, nombre)
fig_clase <- filter_data %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase
}
runApp()
filter_data <- accidentes_dia_comuna %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin) %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
titulo <- paste('Total de accidentes para', tipo_modelo, nombre)
fig_clase <- filter_data %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase
nombre
nombre = 'Aranjuez'
filter_data <- accidentes_dia_comuna %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin) %>%
group_by(COMUNA,CLASE,FECHA) %>% summarise(Total = sum(ACCIDENTALIDAD))
titulo <- paste('Total de accidentes para', tipo_modelo, nombre)
fig_clase <- filter_data %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = "Total de accidentes por gravedad",
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase
runApp()
fig_clase <- filter_data %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
filter_data <- accidentes_dia_comuna %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
View(filter_data)
runApp()
fig_clase_dia
runApp()
runApp()
fig_clase_semana <- filter_data_semana %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_semana
filter_data <- accidentes_dia_comuna %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>%
summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>%
summarise(Total = sum(ACCIDENTALIDAD))
View(filter_data_dia)
View(filter_data_semana)
fig_clase_semana <- filter_data_semana %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_semana
runApp()
runApp()
# Esta funcion retorna los accidentes observados y/o predichos
control_prediction <- function(fecha_inicio, fecha_fin, tipo_modelo){
if(tipo_modelo == 'comuna'){
filter_data <- accidentes_dia_comuna %>% filter(COMUNA == nombre,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(COMUNA,CLASE,FECHA) %>%
summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(COMUNA,CLASE,SEMANA) %>%
summarise(Total = sum(ACCIDENTALIDAD))
}else if(tipo_modelo == 'barrio'){
filter_data <- accidentes_dia_barrio %>% filter(BARRIO == nombre_barrio,
ymd(FECHA) >= fecha_inicio,
ymd(FECHA) <= fecha_fin)
filter_data_dia <- filter_data %>%
group_by(BARRIO,CLASE,FECHA) %>%
summarise(Total = sum(ACCIDENTALIDAD))
filter_data_semana <- filter_data %>%
group_by(BARRIO,CLASE,SEMANA) %>%
summarise(Total = sum(ACCIDENTALIDAD))
}
pron <- ifelse(tipo_modelo=='comuna','la','el')
titulo <- paste('Total de accidentes para',pron, tipo_modelo, nombre)
fig_clase_dia <- filter_data_dia %>%
plot_ly(x = ~FECHA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
fig_clase_semana <- filter_data_semana %>%
plot_ly(x = ~SEMANA, y = ~ Total,color = ~CLASE, type = 'scatter', mode = 'lines+markers')   %>%
layout(title = titulo,
xaxis = list(title = "",
categoryorder = "array",
categoryarray = ~CLASE),
yaxis = list(title = "Total")
)
return(fig_clase_semana)
}
runApp()
runApp()
shiny::runApp()
runApp()
setwd("C:/Users/USER/Desktop/Tae 2020/Project_x/Shiny_dashboard")
shiny::runApp()
shiny::runApp()
install.packages(pkg, dependencies = TRUE)
runApp()
install.packages(pkg, dependencies = TRUE)
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/Project_x/Shiny_dashboard")
runApp()
setwd("~/GitHub/Project_x/Shiny_dashboard")
shiny::runApp()
install.packages(pkg, dependencies = TRUE)
shiny::runApp()
install.packages(pkg, dependencies = TRUE)
shiny::runApp()
install.packages(pkg, dependencies = TRUE)
runApp()
setwd("~/GitHub/Project_x/Shiny_dashboard")
shiny::runApp()
shiny::runApp()
install.packages(pkg, dependencies = TRUE)
setwd("~/GitHub/Project_x/Shiny_dashboard")
shiny::runApp()
install.packages(pkg, dependencies = TRUE)
setwd("~/GitHub/Project_x/Shiny_dashboard")
shiny::runApp()
runApp()
setwd("~/GitHub/Project_x/Shiny_dashboard")
runApp()
setwd("~/GitHub/Project_x/Shiny_dashboard")
setwd("~/GitHub/Project_x/Shiny_dashboard")
setwd("~/GitHub/Project_x/Shiny_dashboard")
setwd("~/GitHub/Project_x/Shiny_dashboard")
setwd("~/GitHub/Project_x/Shiny_dashboard")
shiny::runApp()
