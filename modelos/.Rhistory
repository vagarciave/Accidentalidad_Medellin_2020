knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
load(file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
datos <- datos %>% group_by(BARRIO, CLASE, PERIODO, FECHA, MES, TIEMPO_DIA, SEMANA,
TIEMPO_SEMANA, TIEMPO_MES, DIA_FESTIVO) %>%
summarise(ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(BARRIO = levels(datos$BARRIO), CLASE = levels(datos$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, datos, by = c("BARRIO", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA", "MES",
"TIEMPO_MES", "DIA_FESTIVO"))
base[is.na(base)] <- 0
summary(base)
MSE <- function(y, y_est) mean((y-y_est)**2)
accidentes_dia_barrio <- base
save(accidentes_dia_barrio, file = "accidentes_dia_barrio.RData")
remove(base)
load(file = "accidentes_dia_barrio.RData")
test_dia_barrio <- accidentes_dia_barrio[accidentes_dia_barrio$PERIODO == 2018, ]
train_dia_barrio <- accidentes_dia_barrio[accidentes_dia_barrio$PERIODO %in%
c(2014, 2015, 2016, 2017), ]
mod_dia_barrio <- glmer(ACCIDENTALIDAD ~ DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_dia_barrio, family= poisson())
save(mod_dia_barrio, file = "mod_dia_barrio.RData")
load(file = "mod_dia_barrio.RData")
summary(mod_dia_barrio)
y_est_train_dia_barrio <- round(predict(mod_dia_barrio, newdata = train_dia_barrio,
type = "response"),0)
y_est_test_dia_barrio <- round(predict(mod_dia_barrio, newdata = test_dia_barrio,
type = "response"),0)
MSE(train_dia_barrio$ACCIDENTALIDAD, y_est_train_dia_barrio)
MSE(test_dia_barrio$ACCIDENTALIDAD, y_est_test_dia_barrio)
summary(train_dia_barrio$ACCIDENTALIDAD)
summary(y_est_train_dia_barrio)
data.frame(observado = train_dia_barrio$ACCIDENTALIDAD, predicho = y_est_train_dia_barrio)[sample(1:length(y_est_train_dia_barrio), 500),]
accidentes_semana_barrio <- accidentes_dia_barrio %>% group_by(BARRIO, CLASE, PERIODO, SEMANA, TIEMPO_SEMANA) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
test_semana_barrio <- accidentes_semana_barrio[accidentes_semana_barrio$PERIODO == 2018, ]
train_semana_barrio <- accidentes_semana_barrio[accidentes_semana_barrio$PERIODO %in% c(2014, 2015, 2016, 2017), ]
mod_semana_barrio <- glmer(ACCIDENTALIDAD ~  DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_semana_barrio, family= poisson())
save(mod_semana_barrio, file = "mod_semana_barrio.RData")
load(file = "mod_semana_barrio.RData")
summary(mod_semana_barrio)
y_est_train_semana_barrio <- round(predict(mod_semana_barrio, newdata = train_semana_barrio, type = "response"),0)
y_est_test_semana_barrio <- round(predict(mod_semana_barrio, newdata = test_semana_barrio, type = "response"),0)
MSE(train_semana_barrio$ACCIDENTALIDAD, y_est_train_semana_barrio)
MSE(test_semana_barrio$ACCIDENTALIDAD, y_est_test_semana_barrio)
data.frame(observado = train_semana_barrio$ACCIDENTALIDAD, predicho = y_est_train_semana_barrio)[sample(1:length(y_est_train_semana_barrio), 500),]
accidentes_mes_barrio <- accidentes_dia_barrio %>% group_by(BARRIO, CLASE, PERIODO, MES, TIEMPO_MES) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
summary(accidentes_mes_barrio)
test_mes_barrio <- accidentes_mes_barrio[accidentes_mes_barrio$PERIODO == 2018, ]
train_mes_barrio <- accidentes_mes_barrio[accidentes_mes_barrio$PERIODO %in% c(2014, 2015, 2016, 2017), ]
mod_mes_barrio <- glmer(ACCIDENTALIDAD ~  DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_mes_barrio, family= poisson())
save(mod_semana_barrio, file = "mod_mes_barrio.RData")
load(file = "mod_mes_barrio.RData")
summary(mod_mes_barrio)
y_est_train_mes_barrio <- round(predict(mod_mes_barrio, newdata = train_mes_barrio, type = "response"),0)
y_est_test_mes_barrio <- round(predict(mod_mes_barrio, newdata = test_mes_barrio, type = "response"),0)
MSE(train_mes_barrio$ACCIDENTALIDAD, y_est_train_mes_barrio)
MSE(test_mes_barrio$ACCIDENTALIDAD, y_est_test_mes_barrio)
data.frame(observado = train_mes_barrio$ACCIDENTALIDAD, predicho = y_est_train_mes_barrio)[sample(1:length(y_est_train_mes_barrio), 500),]
mod_mes_barrio <- glmer(ACCIDENTALIDAD ~  DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_mes_barrio, family= poisson())
save(mod_mes_barrio, file = "mod_mes_barrio.RData")
load(file = "mod_mes_barrio.RData")
summary(mod_mes_barrio)
y_est_train_mes_barrio <- round(predict(mod_mes_barrio, newdata = train_mes_barrio, type = "response"),0)
y_est_test_mes_barrio <- round(predict(mod_mes_barrio, newdata = test_mes_barrio, type = "response"),0)
MSE(train_mes_barrio$ACCIDENTALIDAD, y_est_train_mes_barrio)
MSE(test_mes_barrio$ACCIDENTALIDAD, y_est_test_mes_barrio)
data.frame(observado = train_mes_barrio$ACCIDENTALIDAD, predicho = y_est_train_mes_barrio)[sample(1:length(y_est_train_mes_barrio), 500),]
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
#  Vector con fechas de dias festivos
# Definir dias festivos
festivos <- ymd(c(
#2014
'2014-01-01','2014-01-06','2014-03-24','2014-04-17','2014-04-18', '2014-05-01',
'2014-06-02','2014-06-23','2014-06-30','2014-07-20','2014-08-07', '2014-08-18',
'2014-10-13','2014-11-03','2014-11-17','2014-12-08','2014-12-25',
#2015
'2015-01-01','2015-01-12','2015-03-23','2015-03-29','2015-04-02','2015-04-03',
'2015-04-05','2015-05-01','2015-05-18','2015-06-08','2015-06-15','2015-06-29',
'2015-07-20','2015-08-07', '2015-08-17','2015-10-12','2015-11-02','2015-11-16',
'2015-12-08','2015-12-25',
#2016
'2016-01-01','2016-01-11','2016-03-20','2016-03-21','2016-03-24','2016-03-25',
'2016-03-27','2016-05-01','2016-05-09','2016-05-30','2016-06-06','2016-07-04',
'2016-07-20','2016-08-07', '2016-08-15','2016-10-17','2016-11-07','2016-11-14',
'2016-12-08','2016-12-25',
#2017
'2017-01-01','2017-01-09','2017-03-20','2017-04-09','2017-04-13','2017-04-14',
'2017-04-16','2017-05-01','2017-05-29','2017-06-19','2017-06-26','2017-07-03',
'2017-07-20','2017-08-07', '2017-08-21','2017-10-16','2017-11-06','2017-11-13',
'2017-12-08','2017-12-25',
#2018
'2018-01-01','2018-01-08','2018-03-19','2018-03-25','2018-03-29','2018-03-30',
'2018-04-01','2018-05-01','2018-05-14','2018-06-04','2018-06-11','2018-07-02',
'2018-07-20','2018-08-07', '2018-08-20','2018-10-15','2018-11-05','2018-11-11',
'2018-12-08','2018-12-25',
#2019
'2019-01-01','2019-01-07','2019-03-25','2019-04-18','2019-04-19','2019-05-1',
'2019-06-03','2019-06-24','2019-07-01','2019-07-20','2019-08-07','2019-08-19',
'2019-10-14','2019-11-04','2019-11-11','2019-12-08','2019-12-25',
#2020
'2020-01-01','2020-01-06','2020-03-23','2020-04-9','2020-04-10','2020-05-01',
'2020-05-25','2020-06-15','2020-06-22','2020-06-29','2020-07-20','2020-08-07',
'2020-08-17','2020-10-12','2020-11-02','2020-11-16','2020-12-08','2020-12-25'
))
save(festivos, file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(COMUNA, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
datos <- datos %>% group_by(COMUNA, CLASE, PERIODO, FECHA, MES, TIEMPO_DIA, SEMANA,
TIEMPO_SEMANA, TIEMPO_MES, DIA_FESTIVO) %>%
summarise(ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(COMUNA = levels(datos$COMUNA), CLASE = levels(datos$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, datos, by = c("COMUNA", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA", "MES",
"TIEMPO_MES", "DIA_FESTIVO"))
base[is.na(base)] <- 0
summary(base)
MSE <- function(y, y_est) mean((y-y_est)**2)
accidentes_dia_comuna <- base
save(accidentes_dia_comuna, file = "accidentes_dia_comuna.RData")
remove(base)
load(file = "dias_festivos.RData")
load(file = "accidentes_dia_comuna.RData")
test_dia_comuna <- accidentes_dia_comuna[accidentes_dia_comuna$PERIODO == 2018, ]
train_dia_comuna <- accidentes_dia_comuna[accidentes_dia_comuna$PERIODO %in%
c(2014, 2015, 2016, 2017), ]
mod_dia_comuna <- glmer(ACCIDENTALIDAD ~ DIA_FESTIVO + (1 | COMUNA/CLASE),
data = train_dia_comuna, family= poisson())
save(mod_dia_comuna, file = "mod_dia_comuna.RData")
load(file = "mod_dia_comuna.RData")
summary(mod_dia_comuna)
y_est_train_dia_comuna <- round(predict(mod_dia_comuna, newdata = train_dia_comuna,
type = "response"),0)
y_est_test_dia_comuna <- round(predict(mod_dia_comuna, newdata = test_dia_comuna,
type = "response"),0)
MSE(train_dia_comuna$ACCIDENTALIDAD, y_est_train_dia_comuna)
MSE(test_dia_comuna$ACCIDENTALIDAD, y_est_test_dia_comuna)
summary(train_dia_comuna$ACCIDENTALIDAD)
summary(y_est_train_dia_comuna)
data.frame(observado = train_dia_comuna$ACCIDENTALIDAD, predicho = y_est1_train_dia_comuna)[sample(1:length(y_est1_train_dia_comuna), 500),]
data.frame(observado = train_dia_comuna$ACCIDENTALIDAD, predicho = y_est_train_dia_comuna)[sample(1:length(y_est_train_dia_comuna), 500),]
# Selecciona una comuna para enseñar sus accidentalidad por tipo de accidente
comuna <- readline(prompt = "Introduzca una comuna sin ningún acento: ")
# Fecha inicial considerada, DEBE SER MAYOR A 2014-01-01
fecha_inicial <- as.Date(readline(prompt = "Introduzca una fecha inicial: "))
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
load(file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
datos <- datos %>% group_by(BARRIO, CLASE, PERIODO, FECHA, MES, TIEMPO_DIA, SEMANA,
TIEMPO_SEMANA, TIEMPO_MES, DIA_FESTIVO) %>%
summarise(ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(BARRIO = levels(datos$BARRIO), CLASE = levels(datos$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, datos, by = c("BARRIO", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA", "MES",
"TIEMPO_MES", "DIA_FESTIVO"))
base[is.na(base)] <- 0
summary(base)
MSE <- function(y, y_est) mean((y-y_est)**2)
accidentes_dia_barrio <- base
save(accidentes_dia_barrio, file = "accidentes_dia_barrio.RData")
remove(base)
load(file = "accidentes_dia_barrio.RData")
test_dia_barrio <- accidentes_dia_barrio[accidentes_dia_barrio$PERIODO == 2018, ]
train_dia_barrio <- accidentes_dia_barrio[accidentes_dia_barrio$PERIODO %in%
c(2014, 2015, 2016, 2017), ]
mod_dia_barrio <- glmer(ACCIDENTALIDAD ~ DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_dia_barrio, family= poisson())
save(mod_dia_barrio, file = "mod_dia_barrio.RData")
load(file = "mod_dia_barrio.RData")
summary(mod_dia_barrio)
y_est_train_dia_barrio <- round(predict(mod_dia_barrio, newdata = train_dia_barrio,
type = "response"),0)
y_est_test_dia_barrio <- round(predict(mod_dia_barrio, newdata = test_dia_barrio,
type = "response"),0)
MSE(train_dia_barrio$ACCIDENTALIDAD, y_est_train_dia_barrio)
MSE(test_dia_barrio$ACCIDENTALIDAD, y_est_test_dia_barrio)
summary(train_dia_barrio$ACCIDENTALIDAD)
summary(y_est_train_dia_barrio)
data.frame(observado = train_dia_barrio$ACCIDENTALIDAD, predicho = y_est_train_dia_barrio)[sample(1:length(y_est_train_dia_barrio), 500),]
accidentes_semana_barrio <- accidentes_dia_barrio %>% group_by(BARRIO, CLASE, PERIODO, SEMANA, TIEMPO_SEMANA) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
test_semana_barrio <- accidentes_semana_barrio[accidentes_semana_barrio$PERIODO == 2018, ]
train_semana_barrio <- accidentes_semana_barrio[accidentes_semana_barrio$PERIODO %in% c(2014, 2015, 2016, 2017), ]
mod_semana_barrio <- glmer(ACCIDENTALIDAD ~  DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_semana_barrio, family= poisson())
save(mod_semana_barrio, file = "mod_semana_barrio.RData")
load(file = "mod_semana_barrio.RData")
summary(mod_semana_barrio)
y_est_train_semana_barrio <- round(predict(mod_semana_barrio, newdata = train_semana_barrio, type = "response"),0)
y_est_test_semana_barrio <- round(predict(mod_semana_barrio, newdata = test_semana_barrio, type = "response"),0)
MSE(train_semana_barrio$ACCIDENTALIDAD, y_est_train_semana_barrio)
MSE(test_semana_barrio$ACCIDENTALIDAD, y_est_test_semana_barrio)
data.frame(observado = train_semana_barrio$ACCIDENTALIDAD, predicho = y_est_train_semana_barrio)[sample(1:length(y_est_train_semana_barrio), 500),]
accidentes_mes_barrio <- accidentes_dia_barrio %>% group_by(BARRIO, CLASE, PERIODO, MES, TIEMPO_MES) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
summary(accidentes_mes_barrio)
test_mes_barrio <- accidentes_mes_barrio[accidentes_mes_barrio$PERIODO == 2018, ]
train_mes_barrio <- accidentes_mes_barrio[accidentes_mes_barrio$PERIODO %in% c(2014, 2015, 2016, 2017), ]
mod_mes_barrio <- glmer(ACCIDENTALIDAD ~  DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_mes_barrio, family= poisson())
save(mod_mes_barrio, file = "mod_mes_barrio.RData")
load(file = "mod_mes_barrio.RData")
summary(mod_mes_barrio)
y_est_train_mes_barrio <- round(predict(mod_mes_barrio, newdata = train_mes_barrio, type = "response"),0)
y_est_test_mes_barrio <- round(predict(mod_mes_barrio, newdata = test_mes_barrio, type = "response"),0)
MSE(train_mes_barrio$ACCIDENTALIDAD, y_est_train_mes_barrio)
MSE(test_mes_barrio$ACCIDENTALIDAD, y_est_test_mes_barrio)
data.frame(observado = train_mes_barrio$ACCIDENTALIDAD, predicho = y_est_train_mes_barrio)[sample(1:length(y_est_train_mes_barrio), 500),]
git merge
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
load(file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
datos <- datos %>% group_by(BARRIO, CLASE, PERIODO, FECHA, MES, TIEMPO_DIA, SEMANA,
TIEMPO_SEMANA, TIEMPO_MES, DIA_FESTIVO) %>%
summarise(ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(BARRIO = levels(datos$BARRIO), CLASE = levels(datos$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
load(file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
datos <- datos %>% group_by(BARRIO, CLASE, PERIODO, FECHA, MES, TIEMPO_DIA, SEMANA,
TIEMPO_SEMANA, TIEMPO_MES, DIA_FESTIVO) %>%
summarise(ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(BARRIO = levels(datos$BARRIO), CLASE = levels(datos$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, datos, by = c("BARRIO", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA", "MES",
"TIEMPO_MES", "DIA_FESTIVO"))
base[is.na(base)] <- 0
summary(base)
MSE <- function(y, y_est) mean((y-y_est)**2)
accidentes_dia_barrio <- base
save(accidentes_dia_barrio, file = "accidentes_dia_barrio.RData")
remove(base)
load(file = "accidentes_dia_barrio.RData")
test_dia_barrio <- accidentes_dia_barrio[accidentes_dia_barrio$PERIODO == 2018, ]
train_dia_barrio <- accidentes_dia_barrio[accidentes_dia_barrio$PERIODO %in%
c(2014, 2015, 2016, 2017), ]
mod_dia_barrio <- glmer(ACCIDENTALIDAD ~ DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_dia_barrio, family= poisson())
save(mod_dia_barrio, file = "mod_dia_barrio.RData")
load(file = "mod_dia_barrio.RData")
summary(mod_dia_barrio)
y_est_train_dia_barrio <- round(predict(mod_dia_barrio, newdata = train_dia_barrio,
type = "response"),0)
y_est_test_dia_barrio <- round(predict(mod_dia_barrio, newdata = test_dia_barrio,
type = "response"),0)
MSE(train_dia_barrio$ACCIDENTALIDAD, y_est_train_dia_barrio)
MSE(test_dia_barrio$ACCIDENTALIDAD, y_est_test_dia_barrio)
summary(train_dia_barrio$ACCIDENTALIDAD)
summary(y_est_train_dia_barrio)
data.frame(observado = train_dia_barrio$ACCIDENTALIDAD, predicho = y_est_train_dia_barrio)[sample(1:length(y_est_train_dia_barrio), 500),]
accidentes_semana_barrio <- accidentes_dia_barrio %>% group_by(BARRIO, CLASE, PERIODO, SEMANA, TIEMPO_SEMANA) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
test_semana_barrio <- accidentes_semana_barrio[accidentes_semana_barrio$PERIODO == 2018, ]
train_semana_barrio <- accidentes_semana_barrio[accidentes_semana_barrio$PERIODO %in% c(2014, 2015, 2016, 2017), ]
mod_semana_barrio <- glmer(ACCIDENTALIDAD ~  DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_semana_barrio, family= poisson())
save(mod_semana_barrio, file = "mod_semana_barrio.RData")
load(file = "mod_semana_barrio.RData")
summary(mod_semana_barrio)
y_est_train_semana_barrio <- round(predict(mod_semana_barrio, newdata = train_semana_barrio, type = "response"),0)
y_est_test_semana_barrio <- round(predict(mod_semana_barrio, newdata = test_semana_barrio, type = "response"),0)
MSE(train_semana_barrio$ACCIDENTALIDAD, y_est_train_semana_barrio)
MSE(test_semana_barrio$ACCIDENTALIDAD, y_est_test_semana_barrio)
data.frame(observado = train_semana_barrio$ACCIDENTALIDAD, predicho = y_est_train_semana_barrio)[sample(1:length(y_est_train_semana_barrio), 500),]
accidentes_mes_barrio <- accidentes_dia_barrio %>% group_by(BARRIO, CLASE, PERIODO, MES, TIEMPO_MES) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
summary(accidentes_mes_barrio)
test_mes_barrio <- accidentes_mes_barrio[accidentes_mes_barrio$PERIODO == 2018, ]
train_mes_barrio <- accidentes_mes_barrio[accidentes_mes_barrio$PERIODO %in% c(2014, 2015, 2016, 2017), ]
mod_mes_barrio <- glmer(ACCIDENTALIDAD ~  DIA_FESTIVO + (1 | BARRIO/CLASE),
data = train_mes_barrio, family= poisson())
save(mod_mes_barrio, file = "mod_mes_barrio.RData")
load(file = "mod_mes_barrio.RData")
summary(mod_mes_barrio)
y_est_train_mes_barrio <- round(predict(mod_mes_barrio, newdata = train_mes_barrio, type = "response"),0)
y_est_test_mes_barrio <- round(predict(mod_mes_barrio, newdata = test_mes_barrio, type = "response"),0)
MSE(train_mes_barrio$ACCIDENTALIDAD, y_est_train_mes_barrio)
MSE(test_mes_barrio$ACCIDENTALIDAD, y_est_test_mes_barrio)
data.frame(observado = train_mes_barrio$ACCIDENTALIDAD, predicho = y_est_train_mes_barrio)[sample(1:length(y_est_train_mes_barrio), 500),]
