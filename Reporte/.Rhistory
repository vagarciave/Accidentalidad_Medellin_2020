mse_test_mes_comuna2))
datos_mse <- datos_mse %>%
mutate(Porcentaje_Variacion = round(100*abs(Train_MSE-Test_MSE)/(Train_MSE+Test_MSE), 2))
knitr::kable(datos_mse)
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est2_test_mes_comuna)[sample(1:length(y_est1_test_mes_comuna), 500),]
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)[sample(1:length(y_est_test_mes_comuna2), 500),]
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)[sample(1:length(y_est_test_mes_comuna2), 10000), ]
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)[sample(1:length(y_est_test_mes_comuna2), 1000), ]
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)[sample(1:length(y_est_test_mes_comuna2), 1000), ]
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)[sample(1:length(y_est_test_mes_comuna2), 1000), ]
runApp('C:/Users/Usuario/Desktop/NACHO/Semestre 8/TAE/Project_x/Shiny_dashboard')
setwd("C:/Users/Usuario/Desktop/NACHO/Semestre 8/TAE/Project_x/Shiny_dashboard")
runApp()
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)
data.frame(observado = test_semana_comuna$ACCIDENTALIDAD, predicho = y_est_test_semana_comuna3)
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna3)
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)
setwd("C:/Users/Usuario/Desktop/NACHO/Semestre 8/TAE/Trabajo_1/Reporte")
knitr::opts_chunk$set(echo = TRUE)
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
load(file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
load(file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
datos <- datos %>% group_by(BARRIO, CLASE, PERIODO, FECHA, DIA_NOMBRE, TIEMPO_DIA, SEMANA,
TIEMPO_SEMANA, TIEMPO_MES, DIA_FESTIVO) %>%
summarise(ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(magrittr)
library(lubridate)
library("zoo")
library(lme4)
load(file = "dias_festivos.RData")
datos <- read.csv("Base_definitiva.csv", header = T, stringsAsFactors = T,
encoding = "UTF-8")
datos <- datos %>% select(BARRIO, CLASE, FECHA, PERIODO, MES, DIA_NOMBRE)
datos$FECHA <- as.Date(datos$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
datos$MES_NOMBRE <- paste(datos$PERIODO, datos$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(datos$FECHA, origin="2014-01-01")
datos$TIEMPO_DIA <- as.numeric(as.Date(datos$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
datos <- datos %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
datos <- datos %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
datos <- datos %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
datos <- datos %>% mutate(ACCIDENTALIDAD = 1)
datos <- datos %>% group_by(BARRIO, CLASE, PERIODO, FECHA, DIA_NOMBRE, TIEMPO_DIA, SEMANA,
TIEMPO_SEMANA, TIEMPO_MES, DIA_FESTIVO) %>%
summarise(ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(BARRIO = levels(datos$BARRIO), CLASE = levels(datos$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, subset(datos, select = -DIA_NOMBRE),
by = c("BARRIO", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA",
"TIEMPO_MES", "DIA_FESTIVO"))
base[is.na(base)] <- 0
base <- left_join(base, distinct(datos[, c("FECHA", "DIA_NOMBRE")]), by = "FECHA")
head(base)
base <- subset(base, select=c(1,2,3,12,4,5,6,7,8,9,10,11))
head(base)
accidentes_dia_barrio <- base
save(accidentes_dia_barrio, file = "accidentes_dia_barrio.RData")
remove(base)
load(file = "accidentes_dia_barrio.RData")
accidentes_semana_barrio <- accidentes_dia_barrio %>% group_by(BARRIO, CLASE, PERIODO, SEMANA, TIEMPO_SEMANA) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F, warning = F)
df <- read.csv(file = "Base_definitiva.csv", header = T, nrows = 10000,
stringsAsFactors = T)
df$FECHA <- as.Date(df$FECHA)
df
MSE <- function(y, y_est) mean((y-y_est)**2)
library(lme4)      # Paquete para la creación de modelos mixtos poisson
library(tidyverse) # Paquete para la creación de los conjuntos de datos
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(COMUNA = levels(df$COMUNA), CLASE = levels(df$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, subset(df, select = -DIA_NOMBRE),
by = c("COMUNA", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA",
"TIEMPO_MES", "DIA_FESTIVO"))
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F, warning = F)
df <- read.csv(file = "Base_definitiva.csv", header = T, nrows = 10000,
stringsAsFactors = T)
df$FECHA <- as.Date(df$FECHA)
df
MSE <- function(y, y_est) mean((y-y_est)**2)
library(lme4)      # Paquete para la creación de modelos mixtos poisson
library(tidyverse) # Paquete para la creación de los conjuntos de datos
df <- df %>% select(COMUNA, CLASE, FECHA, PERIODO, MES, DIA_NOMBRE)
df$FECHA <- as.Date(df$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
df$MES_NOMBRE <- paste(df$PERIODO, df$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(df$FECHA, origin="2014-01-01")
df$TIEMPO_DIA <- as.numeric(as.Date(df$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
df <- df %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
df <- df %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
df <- df %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
df <- df %>% mutate(ACCIDENTALIDAD = 1)
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(COMUNA = levels(df$COMUNA), CLASE = levels(df$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, subset(df, select = -DIA_NOMBRE),
by = c("COMUNA", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA",
"TIEMPO_MES", "DIA_FESTIVO"))
base[is.na(base)] <- 0
accidentes_dia_comuna <- left_join(base, distinct(df[, c("FECHA", "DIA_NOMBRE")]), by = "FECHA")
remove(df); remove(base)
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F, warning = F)
df <- read.csv(file = "Base_definitiva.csv", header = T, nrows = 10000,
stringsAsFactors = T)
df$FECHA <- as.Date(df$FECHA)
df
MSE <- function(y, y_est) mean((y-y_est)**2)
library(lme4)      # Paquete para la creación de modelos mixtos poisson
library(tidyverse) # Paquete para la creación de los conjuntos de datos
df <- df %>% select(COMUNA, CLASE, FECHA, PERIODO, MES, DIA_NOMBRE)
df$FECHA <- as.Date(df$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
df$MES_NOMBRE <- paste(df$PERIODO, df$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(df$FECHA, origin="2014-01-01")
df$TIEMPO_DIA <- as.numeric(as.Date(df$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
df <- df %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
df <- df %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
df <- df %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', size="footnotesize",
message = F, warning = F)
load(file = "dias_festivos.RData")
df <- read.csv(file = "Base_definitiva.csv", header = T, nrows = 10000,
stringsAsFactors = T)
df$FECHA <- as.Date(df$FECHA)
df
MSE <- function(y, y_est) mean((y-y_est)**2)
library(lme4)      # Paquete para la creación de modelos mixtos poisson
library(tidyverse) # Paquete para la creación de los conjuntos de datos
df <- df %>% select(COMUNA, CLASE, FECHA, PERIODO, MES, DIA_NOMBRE)
df$FECHA <- as.Date(df$FECHA)
# Se agrega la variable TIEMPO y MES_NOMBRE
df$MES_NOMBRE <- paste(df$PERIODO, df$MES, sep="-") %>% as.yearmon("%Y-%m")
# Para obtener la inversa se usaría: zoo::as.Date(df$FECHA, origin="2014-01-01")
df$TIEMPO_DIA <- as.numeric(as.Date(df$FECHA)) - as.numeric(as.Date("2014-01-01")) + 1
# Se crea la variable SEMANA
df <- df %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
df <- df %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
df <- df %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
# accidentalidad
df <- df %>% mutate(ACCIDENTALIDAD = 1)
fecha_vector <- as.Date(as.Date("2014-01-01"):as.Date("2018-12-31"))
base <- expand.grid(COMUNA = levels(df$COMUNA), CLASE = levels(df$CLASE),
FECHA = fecha_vector)
base <- base %>% mutate(TIEMPO_DIA = as.numeric(FECHA) -
as.numeric(as.Date("2014-01-01")) + 1)
# PERIODO
base <- base %>% mutate(PERIODO = as.numeric(format(FECHA,'%Y')))
# Se crea la variable SEMANA
base <- base %>% mutate(SEMANA = strftime(FECHA, format = "%Y-%V"),
TIEMPO_SEMANA = match(SEMANA, sort(unique(SEMANA))))
# Se crea la variable MES
base <- base %>% mutate(MES = strftime(FECHA, format = "%Y-%m"),
TIEMPO_MES = match(MES, sort(unique(MES))))
# días festivos
base <- base %>% mutate(DIA_FESTIVO = ifelse(ymd(FECHA) %in% festivos,1,0))
base <- left_join(base, subset(df, select = -DIA_NOMBRE),
by = c("COMUNA", "CLASE", "FECHA", "TIEMPO_DIA",
"PERIODO", "SEMANA", "TIEMPO_SEMANA",
"TIEMPO_MES", "DIA_FESTIVO"))
base[is.na(base)] <- 0
accidentes_dia_comuna <- left_join(base, distinct(df[, c("FECHA", "DIA_NOMBRE")]), by = "FECHA")
remove(df); remove(base)
load(file = "accidentes_dia_comuna.RData") # base de datos
dim(accidentes_dia_comuna)
accidentes_dia_comuna <- subset(accidentes_dia_comuna, select=c(1,2,3,12,4,5,6,
7,8,9,10,11))
accidentes_dia_comuna
test_dia_comuna <- accidentes_dia_comuna[accidentes_dia_comuna$PERIODO == 2018, ]
train_dia_comuna <- accidentes_dia_comuna[accidentes_dia_comuna$PERIODO %in%
c(2014, 2015, 2016, 2017), ]
load(file = "mod_dia_comuna0.RData")
load(file = "mod_dia_comuna1.RData")
load(file = "mod_dia_comuna2.RData")
load(file = "mod_dia_comuna3.RData")
load(file = "mod_dia_comuna4.RData")
anova(mod_dia_comuna0, mod_dia_comuna1, mod_dia_comuna2, mod_dia_comuna3, mod_dia_comuna4)
# Modelo 0
y_est_train_dia_comuna0 <- round(predict(mod_dia_comuna0, newdata = train_dia_comuna,
type = "response"),0)
y_est_test_dia_comuna0 <- round(predict(mod_dia_comuna0, newdata = test_dia_comuna,
type = "response"),0)
mse_train_dia_comuna0 <- round(MSE(train_dia_comuna$ACCIDENTALIDAD,
y_est_train_dia_comuna0),4)
mse_test_dia_comuna0 <- round(MSE(test_dia_comuna$ACCIDENTALIDAD,
y_est_test_dia_comuna0),4)
# Modelo 1
y_est_train_dia_comuna1 <- round(predict(mod_dia_comuna1, newdata = train_dia_comuna,
type = "response"),0)
y_est_test_dia_comuna1 <- round(predict(mod_dia_comuna1, newdata = test_dia_comuna,
type = "response"),0)
mse_train_dia_comuna1 <- round(MSE(train_dia_comuna$ACCIDENTALIDAD,
y_est_train_dia_comuna1),4)
mse_test_dia_comuna1 <- round(MSE(test_dia_comuna$ACCIDENTALIDAD,
y_est_test_dia_comuna1),4)
# Modelo 2
y_est_train_dia_comuna2 <- round(predict(mod_dia_comuna2, newdata = train_dia_comuna,
type = "response"),0)
y_est_test_dia_comuna2 <- round(predict(mod_dia_comuna2, newdata = test_dia_comuna,
type = "response"),0)
mse_train_dia_comuna2 <- round(MSE(train_dia_comuna$ACCIDENTALIDAD,
y_est_train_dia_comuna2),4)
mse_test_dia_comuna2 <- round(MSE(test_dia_comuna$ACCIDENTALIDAD,
y_est_test_dia_comuna2),4)
# Modelo 3
y_est_train_dia_comuna3 <- round(predict(mod_dia_comuna3, newdata = train_dia_comuna,
type = "response"),0)
y_est_test_dia_comuna3 <- round(predict(mod_dia_comuna3, newdata = test_dia_comuna,
type = "response"),0)
mse_train_dia_comuna3 <- round(MSE(train_dia_comuna$ACCIDENTALIDAD,
y_est_train_dia_comuna3),4)
mse_test_dia_comuna3 <- round(MSE(test_dia_comuna$ACCIDENTALIDAD,
y_est_test_dia_comuna3),4)
# Modelo 4
y_est_train_dia_comuna4 <- round(predict(mod_dia_comuna4, newdata = train_dia_comuna,
type = "response"),0)
y_est_test_dia_comuna4 <- round(predict(mod_dia_comuna4, newdata = test_dia_comuna,
type = "response"),0)
mse_train_dia_comuna4 <- round(MSE(train_dia_comuna$ACCIDENTALIDAD,
y_est_train_dia_comuna4),4)
mse_test_dia_comuna4 <- round(MSE(test_dia_comuna$ACCIDENTALIDAD,
y_est_test_dia_comuna4),4)
datos_mse <- data.frame(Modelo_Mixto_Poisson = c("ACCIDENTALIDAD ~ 1 + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + TIEMPO_DIA + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + DIA_NOMBRE + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + DIA_NOMBRE + (1 + DIA_FESTIVO | COMUNA/CLASE)"),
Train_MSE = c(mse_train_dia_comuna0, mse_train_dia_comuna1,
mse_train_dia_comuna2, mse_train_dia_comuna3,
mse_train_dia_comuna4),
Test_MSE = c(mse_test_dia_comuna0, mse_test_dia_comuna1,
mse_test_dia_comuna2, mse_test_dia_comuna3,
mse_test_dia_comuna4))
datos_mse <- datos_mse %>%
mutate(Porcentaje_Variacion = round(100*abs(Train_MSE-Test_MSE)/(Train_MSE+Test_MSE), 2))
knitr::kable(datos_mse)
data.frame(observado = test_dia_comuna$ACCIDENTALIDAD, predicho = y_est_test_dia_comuna4)
remove(y_est_train_dia_comuna0, y_est_train_dia_comuna1, y_est_train_dia_comuna2, y_est_train_dia_comuna3, y_est_train_dia_comuna4, y_est_test_dia_comuna0, y_est_test_dia_comuna1, y_est_test_dia_comuna2, y_est_test_dia_comuna3, y_est_test_dia_comuna4,mse_train_dia_comuna0,mse_train_dia_comuna1,mse_train_dia_comuna2,mse_train_dia_comuna3,mse_train_dia_comuna4,mse_test_dia_comuna0,mse_test_dia_comuna1,mse_test_dia_comuna2,mse_test_dia_comuna3,mse_test_dia_comuna4)
accidentes_semana_comuna <- accidentes_dia_comuna %>%
group_by(COMUNA, CLASE, PERIODO, SEMANA, TIEMPO_SEMANA) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
accidentes_semana_comuna
test_semana_comuna <- accidentes_semana_comuna[accidentes_semana_comuna$PERIODO == 2018, ]
train_semana_comuna <- accidentes_semana_comuna[accidentes_semana_comuna$PERIODO %in%
c(2014, 2015, 2016, 2017), ]
load(file = "mod_semana_comuna0.RData")
load(file = "mod_semana_comuna1.RData")
load(file = "mod_semana_comuna2.RData")
load(file = "mod_semana_comuna3.RData")
anova(mod_semana_comuna0, mod_semana_comuna1, mod_semana_comuna2, mod_semana_comuna3)
# Modelo 0
y_est_train_semana_comuna0 <- round(predict(mod_semana_comuna0, newdata = train_semana_comuna,
type = "response"),0)
y_est_test_semana_comuna0 <- round(predict(mod_semana_comuna0, newdata = test_semana_comuna,
type = "response"),0)
mse_train_semana_comuna0 <- round(MSE(train_semana_comuna$ACCIDENTALIDAD,
y_est_train_semana_comuna0),4)
mse_test_semana_comuna0 <- round(MSE(test_semana_comuna$ACCIDENTALIDAD,
y_est_test_semana_comuna0),4)
# Modelo 1
y_est_train_semana_comuna1 <- round(predict(mod_semana_comuna1, newdata = train_semana_comuna,
type = "response"),0)
y_est_test_semana_comuna1 <- round(predict(mod_semana_comuna1, newdata = test_semana_comuna,
type = "response"),0)
mse_train_semana_comuna1 <- round(MSE(train_semana_comuna$ACCIDENTALIDAD,
y_est_train_semana_comuna1),4)
mse_test_semana_comuna1 <- round(MSE(test_semana_comuna$ACCIDENTALIDAD,
y_est_test_semana_comuna1),4)
# Modelo 2
y_est_train_semana_comuna2 <- round(predict(mod_semana_comuna2, newdata = train_semana_comuna,
type = "response"),0)
y_est_test_semana_comuna2 <- round(predict(mod_semana_comuna2, newdata = test_semana_comuna,
type = "response"),0)
mse_train_semana_comuna2 <- round(MSE(train_semana_comuna$ACCIDENTALIDAD,
y_est_train_semana_comuna2),4)
mse_test_semana_comuna2 <- round(MSE(test_semana_comuna$ACCIDENTALIDAD,
y_est_test_semana_comuna2),4)
# Modelo 3
y_est_train_semana_comuna3 <- round(predict(mod_semana_comuna3, newdata = train_semana_comuna,
type = "response"),0)
y_est_test_semana_comuna3 <- round(predict(mod_semana_comuna3, newdata = test_semana_comuna,
type = "response"),0)
mse_train_semana_comuna3 <- round(MSE(train_semana_comuna$ACCIDENTALIDAD,
y_est_train_semana_comuna3),4)
mse_test_semana_comuna3 <- round(MSE(test_semana_comuna$ACCIDENTALIDAD,
y_est_test_semana_comuna3),4)
datos_mse <- data.frame(Modelo_Mixto_Poisson = c("ACCIDENTALIDAD ~ 1 + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + TIEMPO_SEMANA + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + (1 + DIA_FESTIVO | COMUNA/CLASE)"),
Train_MSE = c(mse_train_semana_comuna0, mse_train_semana_comuna1,
mse_train_semana_comuna2, mse_train_semana_comuna3),
Test_MSE = c(mse_test_semana_comuna0, mse_test_semana_comuna1,
mse_test_semana_comuna2, mse_test_semana_comuna3))
datos_mse <- datos_mse %>%
mutate(Porcentaje_Variacion = round(100*abs(Train_MSE-Test_MSE)/(Train_MSE+Test_MSE), 2))
knitr::kable(datos_mse)
data.frame(observado = test_semana_comuna$ACCIDENTALIDAD, predicho = y_est_test_semana_comuna3)
remove(y_est_train_semana_comuna0, y_est_train_semana_comuna1, y_est_train_semana_comuna2, y_est_train_semana_comuna3, y_est_test_semana_comuna0, y_est_test_semana_comuna1, y_est_test_semana_comuna2, y_est_test_semana_comuna3,mse_train_semana_comuna0,mse_train_semana_comuna1,mse_train_semana_comuna2,mse_train_semana_comuna3,mse_test_semana_comuna0,mse_test_semana_comuna1,mse_test_semana_comuna2,mse_test_semana_comuna3)
accidentes_mes_comuna <- accidentes_dia_comuna %>% group_by(COMUNA, CLASE, PERIODO, MES, TIEMPO_MES) %>%
summarise(DIA_FESTIVO = sum(DIA_FESTIVO), ACCIDENTALIDAD = sum(ACCIDENTALIDAD))
accidentes_mes_comuna
test_mes_comuna <- accidentes_mes_comuna[accidentes_mes_comuna$PERIODO == 2018, ]
train_mes_comuna <- accidentes_mes_comuna[accidentes_mes_comuna$PERIODO %in%
c(2014, 2015, 2016, 2017), ]
load(file = "mod_mes_comuna0.RData")
load(file = "mod_mes_comuna1.RData")
load(file = "mod_mes_comuna2.RData")
anova(mod_mes_comuna0, mod_mes_comuna1, mod_mes_comuna2)
# Modelo 0
y_est_train_mes_comuna0 <- round(predict(mod_mes_comuna0, newdata = train_mes_comuna,
type = "response"),0)
y_est_test_mes_comuna0 <- round(predict(mod_mes_comuna0, newdata = test_mes_comuna,
type = "response"),0)
mse_train_mes_comuna0 <- round(MSE(train_mes_comuna$ACCIDENTALIDAD,
y_est_train_mes_comuna0),4)
mse_test_mes_comuna0 <- round(MSE(test_mes_comuna$ACCIDENTALIDAD,
y_est_test_mes_comuna0),4)
# Modelo 1
y_est_train_mes_comuna1 <- round(predict(mod_mes_comuna1, newdata = train_mes_comuna,
type = "response"),0)
y_est_test_mes_comuna1 <- round(predict(mod_mes_comuna1, newdata = test_mes_comuna,
type = "response"),0)
mse_train_mes_comuna1 <- round(MSE(train_mes_comuna$ACCIDENTALIDAD,
y_est_train_mes_comuna1),4)
mse_test_mes_comuna1 <- round(MSE(test_mes_comuna$ACCIDENTALIDAD,
y_est_test_mes_comuna1),4)
# Modelo 2
y_est_train_mes_comuna2 <- round(predict(mod_mes_comuna2, newdata = train_mes_comuna,
type = "response"),0)
y_est_test_mes_comuna2 <- round(predict(mod_mes_comuna2, newdata = test_mes_comuna,
type = "response"),0)
mse_train_mes_comuna2 <- round(MSE(train_mes_comuna$ACCIDENTALIDAD,
y_est_train_mes_comuna2),4)
mse_test_mes_comuna2 <- round(MSE(test_mes_comuna$ACCIDENTALIDAD,
y_est_test_mes_comuna2),4)
datos_mse <- data.frame(Modelo_Mixto_Poisson = c("ACCIDENTALIDAD ~ 1 + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + (1 | COMUNA/CLASE)",
"ACCIDENTALIDAD ~ DIA_FESTIVO + (1 + DIA_FESTIVO | COMUNA/CLASE)"),
Train_MSE = c(mse_train_mes_comuna0, mse_train_mes_comuna1,
mse_train_mes_comuna2),
Test_MSE = c(mse_test_mes_comuna0, mse_test_mes_comuna1,
mse_test_mes_comuna2))
datos_mse <- datos_mse %>%
mutate(Porcentaje_Variacion = round(100*abs(Train_MSE-Test_MSE)/(Train_MSE+Test_MSE), 2))
knitr::kable(datos_mse)
data.frame(observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)
data.frame(COMUNA = test_mes_comuna$COMUNA, observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)
data.frame(COMUNA = test_mes_comuna$COMUNA, CLASE = test_mes_comuna$CLASE,
observado = test_mes_comuna$ACCIDENTALIDAD, predicho = y_est_test_mes_comuna2)
data.frame(test_mes_comuna, predicho = y_est_test_mes_comuna2)
data.frame(test_mes_comuna, A.PREDICHA = y_est_test_mes_comuna2)
data.frame(test_semana_comuna, A.PREDICHA = y_est_test_semana_comuna3)
y_est_test_semana_comuna3 <- round(predict(mod_semana_comuna3, newdata = test_semana_comuna,
type = "response"),0)
data.frame(test_semana_comuna, A.PREDICHA = y_est_test_semana_comuna3)
remove(y_est_train_mes_comuna0,y_est_train_mes_comuna1,y_est_train_mes_comuna2,y_est_test_mes_comuna0,y_est_test_mes_comuna1,y_est_test_mes_comuna2,mse_train_mes_comuna0,mse_train_mes_comuna1,mse_train_mes_comuna2,mse_test_mes_comuna0,mse_test_mes_comuna1,mse_test_mes_comuna2)
load(accidentes_dia_barrio.RData)
load(file = "accidentes_dia_barrio.RData")
accidentes_dia_barrio # Base de datos diaria
accidentes_dia_barrio # Base de datos diaria
